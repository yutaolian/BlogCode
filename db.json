{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/iOS/gesture.png","path":"img/iOS/gesture.png","modified":0,"renderable":0},{"_id":"source/img/java/collection.png","path":"img/java/collection.png","modified":0,"renderable":0},{"_id":"source/img/innerclass/innerclass01.png","path":"img/innerclass/innerclass01.png","modified":0,"renderable":0},{"_id":"source/img/stack/stack.jpg","path":"img/stack/stack.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"source/img/iOS/setlayout.png","path":"img/iOS/setlayout.png","modified":0,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/iOS/layoutSubviews.png","path":"img/iOS/layoutSubviews.png","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"source/img/iOS/uiview.png","path":"img/iOS/uiview.png","modified":0,"renderable":0},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/iOS/pch.png","path":"img/iOS/pch.png","modified":0,"renderable":0},{"_id":"source/img/stack/getMinStack.png","path":"img/stack/getMinStack.png","modified":0,"renderable":0},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/bookImg/allbooks.jpeg","path":"img/bookImg/allbooks.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472814853000},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1472814853000},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1472814853000},{"_id":"themes/huxblog/_config.yml","hash":"345b59ba9b07c34bb4602640922d9fe2999a4a35","modified":1472814853000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1473490332000},{"_id":"source/_posts/Java中interface与-interface的区别.md","hash":"1db87cf9abb949c6624d0b2017f099db056a79f5","modified":1476017902000},{"_id":"source/_posts/Java源码分析-三-HashSet.md","hash":"18533b64d0e361d506fdd983e44a1073dd0dd680","modified":1472830698000},{"_id":"source/_posts/Java源码分析-一-HashMap.md","hash":"9832e9b48b03f0283e1516480574fc213c4e6c51","modified":1473421919000},{"_id":"source/_posts/Java内部类详解.md","hash":"f30eae1d454d314c00fe89150c9142dd22aee9df","modified":1472961244000},{"_id":"source/_posts/iOS图片视频播放.md","hash":"8a2015cb474e576693de5dae37fef8455e016bb6","modified":1442109106000},{"_id":"source/_posts/iOS开发的代码结构.md","hash":"63cef20878af7f27ddb3f1054c17390c72ca7e69","modified":1476016108000},{"_id":"source/_posts/Java源码分析-二-ArrayList.md","hash":"eaf8416a0c45cd4e2374542c77fb9d6931c4290a","modified":1472814853000},{"_id":"source/_posts/hello-world.md","hash":"774b507901d9b17991ace2a70263b6dd6d11999a","modified":1440338687000},{"_id":"source/_posts/UIKit学习总结.md","hash":"decb18f807acc59e149e62fef3c3358cbad82f5d","modified":1476016232000},{"_id":"source/_posts/iOS（iOS7-）开发中的常用的Tips.md","hash":"482929f1bd9dc3c6091b3e15f46b0d6a353be89f","modified":1476016131000},{"_id":"source/_posts/《深入理解Java虚拟机》读书笔记-一.md","hash":"54576151e2b2e1284322e0e1437965cffee5d997","modified":1476018140000},{"_id":"source/_posts/博客说明.md","hash":"fd2be1c7c68263ac55dbbcfd576331419fd8343b","modified":1473421919000},{"_id":"source/_posts/使用lombok简化Java代码.md","hash":"34bad5e34f3a21c2c70f3f5860d80859397eb2ad","modified":1476014014000},{"_id":"source/_posts/学吉他.md","hash":"d1fdfae028d51a843ff03074519db0b019bf6188","modified":1441498163000},{"_id":"source/_posts/算法-三-常用数据结构的定义.md","hash":"2485e4f9d45c2cd09419e86d3b98c46d6bbf50ba","modified":1474636004000},{"_id":"source/_posts/测试文章.md","hash":"b92167f92e46621e95773d1f4c2ea6b474654824","modified":1440944999000},{"_id":"source/_posts/算法-一-Stack-栈-的实现.md","hash":"80a3105b716eeeeb44fe91a652442efcaf74e10b","modified":1473492788000},{"_id":"source/_posts/算法-二-实现一个getMin功能的栈.md","hash":"439dcbfb0a000ecad5e095de5fb2acdf136b3627","modified":1473499203000},{"_id":"source/_posts/读书 2.md","hash":"093b8dadf340959b4506a411561bd89ba28e4d1f","modified":1441454637000},{"_id":"source/_posts/读书.md","hash":"a49867ba9fc4d12d4492ab8537f236d7edf55cf8","modified":1473421919000},{"_id":"source/archives/index.md","hash":"f30bcd9cd0fbe690c2398f21dbf27e56c0c72499","modified":1472814853000},{"_id":"source/img/.DS_Store","hash":"5c6b207392cd65baf6ec21eab8a618b6bcf77590","modified":1476015976000},{"_id":"source/about/index.md","hash":"01ed44649770471af064326f5f3610c952730cc9","modified":1473421919000},{"_id":"source/img/avatar.jpg","hash":"4acb0c03fb9dc29b11370be765cbf39019735026","modified":1456580620000},{"_id":"source/img/favicon.ico","hash":"0dc38229f66a6961e8bd15c9a6b7068633e99105","modified":1472814853000},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1472814853000},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1472814853000},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1472814853000},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1472814853000},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1472814853000},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1472814853000},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1472814853000},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1472814853000},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1472814853000},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1472814853000},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1472814853000},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1472814853000},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1472814853000},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1472814853000},{"_id":"themes/huxblog/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1472814853000},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1472814853000},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"16a4164c3d291131fb66078e8df93b31fe050040","modified":1472814853000},{"_id":"themes/huxblog/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1472814853000},{"_id":"themes/huxblog/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1472821611000},{"_id":"themes/huxblog/layout/post.ejs","hash":"a9db023e8fa7277749eb4b0e6683f944aed3707e","modified":1472820388000},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1472814853000},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1472814853000},{"_id":"source/_posts/Java内部类详解/innerclass01.png","hash":"844fb099ae8434bd16dea29cae375b0690721834","modified":1472865988000},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1472814853000},{"_id":"source/img/iOS/gesture.png","hash":"e9cb5df8a023b10ea3228695664dee7388fb1011","modified":1441107990000},{"_id":"source/img/java/collection.png","hash":"5238c7b5d8a772f3112003be3036cd99d6001184","modified":1473421919000},{"_id":"source/img/stack/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1473498759000},{"_id":"source/img/innerclass/innerclass01.png","hash":"844fb099ae8434bd16dea29cae375b0690721834","modified":1472865988000},{"_id":"source/img/stack/stack.jpg","hash":"c71a5d7f8932b98c7266a2bd582bcfa244a19a78","modified":1473492310000},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1472814853000},{"_id":"themes/huxblog/layout/_partial/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1472830454000},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"28ad30f151b83619418b2265dc7642ee67175973","modified":1472830331000},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"4b859c2171054ecba1d70f0eabe09661a9f4f9eb","modified":1472814853000},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1472814853000},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1472814853000},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1472814853000},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1472814853000},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1472814853000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1472814853000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1472814853000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1472814853000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1472814853000},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1472830342000},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1472814853000},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1472830349000},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1472814853000},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1472814853000},{"_id":"source/img/iOS/setlayout.png","hash":"39f5211fe0bef287bc22df1d927c01481f44a848","modified":1441368581000},{"_id":"source/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1472814853000},{"_id":"source/img/iOS/layoutSubviews.png","hash":"b5adfcd2ff790f43065963415a29f6e19b83dc61","modified":1441369283000},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1472814853000},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1472814853000},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1472814853000},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1472814853000},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1472814853000},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1472814853000},{"_id":"source/img/iOS/uiview.png","hash":"7be9332a77297de9faed756f8904de8346bdd1c0","modified":1441107990000},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1472814853000},{"_id":"source/img/iOS/pch.png","hash":"4b04d9ed6ba87669392ea429ea1611842019dbb9","modified":1442108853000},{"_id":"source/img/stack/getMinStack.png","hash":"4f313b4c3fab224c1971b1eb821778287f4ad336","modified":1473498759000},{"_id":"source/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1472814853000},{"_id":"source/img/bookImg/allbooks.jpeg","hash":"98d94f90211b8d5ba9ac1b20346328d982bc31d5","modified":1473421919000},{"_id":"public/404.html","hash":"dd41d5dcfdf4cd70a6932f7367ad5461ca09e464","modified":1476017799740},{"_id":"public/2016/10/09/使用lombok简化Java代码/index.html","hash":"5dbe068f673fd6bbc9cbc9541cf98c87c25dec0a","modified":1476017906242},{"_id":"public/2016/09/25/《深入理解Java虚拟机》读书笔记-一/index.html","hash":"8bfa9da33750f37a353929e06c89bdfdf7be897d","modified":1476018144721},{"_id":"public/2016/09/02/Java源码分析-三-HashSet/index.html","hash":"e15a150a2ce134f3765a07a412eba9885095ff4b","modified":1476017799740},{"_id":"public/2016/09/02/Java源码分析-二-ArrayList/index.html","hash":"f94e97c03892a62fe5d1e90f90992e4b0823f10a","modified":1476017799741},{"_id":"public/2016/09/01/读书/index.html","hash":"f6bfa5ea169c064f993d79f3b33a78e1d51bc203","modified":1476017799741},{"_id":"public/2016/09/01/博客说明/index.html","hash":"a153bf1309e555ef923fcf50fbe605435bb9cef5","modified":1476017799741},{"_id":"public/2015/09/13/iOS图片视频播放/index.html","hash":"bccdca3d7b8fb95346f8211b77201c6937308285","modified":1476017799741},{"_id":"public/2015/09/05/学吉他/index.html","hash":"c7e9863d5db5ee0b52542f574bd9b4147b297cfc","modified":1476017799741},{"_id":"public/2015/09/05/读书 2/index.html","hash":"22c6e6f6d3a0090d6fe292f0cf11b6243c44ad09","modified":1476017799741},{"_id":"public/2015/09/01/iOS（iOS7-）开发中的常用的Tips/index.html","hash":"44b4d85b0fe4e482c5681f198ff84139abb86762","modified":1476017799741},{"_id":"public/2015/08/23/测试文章/index.html","hash":"25d8d3d9abcdf517840d09dbe63860c1bdb61f53","modified":1476017799741},{"_id":"public/i_dont_wanna_use_default_archives/index.html","hash":"28828362c051e175d0def651d91e3b71415c96fc","modified":1476017799741},{"_id":"public/i_dont_wanna_use_default_archives/page/2/index.html","hash":"a9832f030611b87ca4268e88630c6909e436d231","modified":1476017799741},{"_id":"public/i_dont_wanna_use_default_archives/2015/index.html","hash":"d77fd7279f8eb10ffdb333239ffb39489afd68b5","modified":1476017799741},{"_id":"public/i_dont_wanna_use_default_archives/2015/08/index.html","hash":"67ef3fc2701b161febcfca7f83a7a7b5a827d7ab","modified":1476017799741},{"_id":"public/i_dont_wanna_use_default_archives/2016/index.html","hash":"03b18eebf0fc80ae40f6aea7e3868ed3a3270f5a","modified":1476017799741},{"_id":"public/i_dont_wanna_use_default_archives/2015/09/index.html","hash":"f94e34aeb1f2828873a9cf5c7067e7ccf04ed5f8","modified":1476017799741},{"_id":"public/i_dont_wanna_use_default_archives/2016/page/2/index.html","hash":"fe52c86c75cb9cbb92a1a68af4833f08e6fbd88b","modified":1476017799741},{"_id":"public/i_dont_wanna_use_default_archives/2016/09/index.html","hash":"a0deaed4f1cd550924beabec1f63fbc00631ca00","modified":1476017799741},{"_id":"public/i_dont_wanna_use_default_archives/2016/10/index.html","hash":"062d0817fe55d0dc7ebb219acfab2cae53ea24e1","modified":1476017799741},{"_id":"public/tags/Java/index.html","hash":"09d87948991f3a461e17b455711c862a54f131ae","modified":1476017799741},{"_id":"public/tags/HashSet/index.html","hash":"38445d59cc3b76ee8f93307888c1703e82846c18","modified":1476017799741},{"_id":"public/tags/ArrayList/index.html","hash":"8479de382b8d19b83942c1b225a487b8c8b8ee40","modified":1476017799742},{"_id":"public/tags/Java内部类/index.html","hash":"fe7a1b877e2d04b1cb65eae161fa7bab18543e00","modified":1476017799742},{"_id":"public/tags/iOS/index.html","hash":"e6f988ed858bb3c69e0d14baa14506f9ca7c5124","modified":1476017799742},{"_id":"public/tags/算法/index.html","hash":"01d1f1af989073391f736291941c9cae9fe863fe","modified":1476017799742},{"_id":"public/tags/数据结构/index.html","hash":"63e155fef492dd5c81c2fd608602c10cfda2c6fc","modified":1476017799742},{"_id":"public/tags/Stack/index.html","hash":"814b86d2a375b217b89e583655516cc62dd30269","modified":1476017799742},{"_id":"public/tags/栈/index.html","hash":"25ac22b0df64a412f8556a54111b431eb28fa12d","modified":1476017799742},{"_id":"public/tags/读书/index.html","hash":"8ebe935372b60ca1b7eabec63f7426bb02bb6554","modified":1476017799742},{"_id":"public/tags/编程书籍/index.html","hash":"bb246cdef22c5b3975195b7fcd6b3b8c489ed907","modified":1476017799742},{"_id":"public/about/index.html","hash":"8ee9b6236e52ab9310714515407c4153d38c5790","modified":1476018144724},{"_id":"public/archives/index.html","hash":"4f642dfadb46ebfa4a07a6706e1d2ae0c506acc0","modified":1476017906252},{"_id":"public/tags/index.html","hash":"7af493a3db3778ffdcb7d05d1951d6bf06505703","modified":1476018144723},{"_id":"public/2016/09/12/算法-三-常用数据结构的定义/index.html","hash":"f40ab06569a2892c6ac905aea0a3a737644324c4","modified":1476017799742},{"_id":"public/2016/09/10/算法-二-实现一个getMin功能的栈/index.html","hash":"c89d720658cfa374cb04fbfa88431dfd4bb2720c","modified":1476017799742},{"_id":"public/2016/09/10/算法-一-Stack-栈-的实现/index.html","hash":"54c137ea785fc4399d748f22250fa333bc84e62c","modified":1476017799742},{"_id":"public/2016/09/03/Java内部类详解/index.html","hash":"b36a0ff1a65f4735e60823357e4a5277f422c577","modified":1476017799742},{"_id":"public/2016/09/02/Java源码分析-一-HashMap/index.html","hash":"6a4878d7d9842ccde32fb0e2139bc730734b04fc","modified":1476017799743},{"_id":"public/2015/09/02/iOS开发的代码结构/index.html","hash":"e03c7d6e646e42838572f00db963e8c0227f6229","modified":1476017799743},{"_id":"public/2015/08/30/UIKit学习总结/index.html","hash":"360071b635728d4b0001b110509c5b03f76f95f7","modified":1476017799743},{"_id":"public/2015/08/23/hello-world/index.html","hash":"141464dbeaf5f2e75efb906c5f35d983c20f9ee4","modified":1476017799743},{"_id":"public/index.html","hash":"94207daaa8777e0cdf90844d9b28d4b23631618c","modified":1476018144724},{"_id":"public/page/2/index.html","hash":"a5e690736c251dc02aab6a5b079a630434b96459","modified":1476018144724},{"_id":"public/img/favicon.ico","hash":"0dc38229f66a6961e8bd15c9a6b7068633e99105","modified":1476017799760},{"_id":"public/img/avatar.jpg","hash":"4acb0c03fb9dc29b11370be765cbf39019735026","modified":1476017799760},{"_id":"public/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1476017799760},{"_id":"public/img/java/collection.png","hash":"5238c7b5d8a772f3112003be3036cd99d6001184","modified":1476017799761},{"_id":"public/img/innerclass/innerclass01.png","hash":"844fb099ae8434bd16dea29cae375b0690721834","modified":1476017799761},{"_id":"public/img/iOS/gesture.png","hash":"e9cb5df8a023b10ea3228695664dee7388fb1011","modified":1476017799762},{"_id":"public/img/stack/stack.jpg","hash":"c71a5d7f8932b98c7266a2bd582bcfa244a19a78","modified":1476017799762},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1476017799762},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1476017799762},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1476017799762},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1476017799762},{"_id":"public/2016/09/03/Java内部类详解/innerclass01.png","hash":"844fb099ae8434bd16dea29cae375b0690721834","modified":1476017799762},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1476017800148},{"_id":"public/img/iOS/setlayout.png","hash":"39f5211fe0bef287bc22df1d927c01481f44a848","modified":1476017800148},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1476017800150},{"_id":"public/img/iOS/layoutSubviews.png","hash":"b5adfcd2ff790f43065963415a29f6e19b83dc61","modified":1476017800150},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1476017800158},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1476017800158},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1476017800159},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1476017800159},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1476017800159},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1476017800159},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1476017800159},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1476017800159},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1476017800159},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1476017800159},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1476017800159},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1476017800159},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1476017800160},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1476017800160},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1476017800160},{"_id":"public/img/home-bg.jpg","hash":"a191201c3a98728e6ea66d6827df827ecfcc9d33","modified":1476017800163},{"_id":"public/img/iOS/uiview.png","hash":"7be9332a77297de9faed756f8904de8346bdd1c0","modified":1476017800163},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1476017800165},{"_id":"public/img/iOS/pch.png","hash":"4b04d9ed6ba87669392ea429ea1611842019dbb9","modified":1476017800165},{"_id":"public/img/stack/getMinStack.png","hash":"4f313b4c3fab224c1971b1eb821778287f4ad336","modified":1476017800165},{"_id":"public/img/about-bg.jpg","hash":"b5814b2d10eb38dfda0072365567f3823bc34aba","modified":1476017800170},{"_id":"public/img/bookImg/allbooks.jpeg","hash":"98d94f90211b8d5ba9ac1b20346328d982bc31d5","modified":1476017800182},{"_id":"public/2016/10/09/Java中interface与-interface的区别/index.html","hash":"e2634a582e3a146a6619fcdb285396f3b9e9b7f6","modified":1476017906256},{"_id":"public/tags/注解/index.html","hash":"eb78c80adf2f6a97ae3a2f78f78237b989e691d5","modified":1476017906256},{"_id":"public/tags/interface/index.html","hash":"17bddf248c80f901139b65ad7cfe6ae41826b3f5","modified":1476017906256},{"_id":"public/tags/《深入理解Java虚拟机》/index.html","hash":"2f59cf735d6d875200258b447d8f585be5ce164b","modified":1476018069840},{"_id":"public/tags/深入理解Java虚拟机/index.html","hash":"b09ca158f11abca31a9e6d250839d1d42080bebc","modified":1476018144726}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2016-09-02T11:14:13.000Z","updated":"2016-09-02T11:14:13.000Z","path":"404.html","title":"","comments":1,"_id":"ciu2mvy8y0000dxs6smjxxnl5","content":"","excerpt":"","more":""},{"layout":"archives","title":"Archives","description":"Hey, this is Archives.","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"Hey, this is Archives.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2016-09-02T11:14:13.000Z","updated":"2016-09-02T11:14:13.000Z","path":"archives/index.html","comments":1,"_id":"ciu2mvy9k0002dxs6ywvqklmr","content":"","excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"Wirte Code, Wirte Life.","header-img":"img/about-bg.jpg","comments":1,"_content":"\n\n>Talk is cheap. Show me the code. -Linus Torvalds\n\n2013年11月来京，开始了北漂生活，从开始的朦朦胧胧到现在略有目标，匠心便是人生的追求。成为一名\"手艺人\"也许是最好的目标。\n\n\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Wirte Code, Wirte Life.\"\nheader-img: \"img/about-bg.jpg\"\ncomments: true\n---\n\n\n>Talk is cheap. Show me the code. -Linus Torvalds\n\n2013年11月来京，开始了北漂生活，从开始的朦朦胧胧到现在略有目标，匠心便是人生的追求。成为一名\"手艺人\"也许是最好的目标。\n\n\n\n","updated":"2016-09-09T11:51:59.000Z","path":"about/index.html","_id":"ciu2mvy9p0004dxs68anmvqsp","content":"<blockquote>\n<p>Talk is cheap. Show me the code. -Linus Torvalds</p>\n</blockquote>\n<p>2013年11月来京，开始了北漂生活，从开始的朦朦胧胧到现在略有目标，匠心便是人生的追求。成为一名”手艺人”也许是最好的目标。</p>\n","excerpt":"","more":"<blockquote>\n<p>Talk is cheap. Show me the code. -Linus Torvalds</p>\n</blockquote>\n<p>2013年11月来京，开始了北漂生活，从开始的朦朦胧胧到现在略有目标，匠心便是人生的追求。成为一名”手艺人”也许是最好的目标。</p>\n"},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2016-09-02T11:14:13.000Z","updated":"2016-09-02T11:14:13.000Z","path":"tags/index.html","comments":1,"_id":"ciu2mvy9w0007dxs6byjvz3m6","content":"","excerpt":"","more":""}],"Post":[{"title":"Java源码分析(一)-HashMap","date":"2016-09-02T08:55:34.000Z","_content":"\nHashMap 在java集合中来说算是比较重要的一个类了。其源码也是在面试过程中经常被问的一道面试题。之前自己也大略的看过，现在抱着一起学习的态度，分析一下HashMap的源码。\n\n### 0. 所处位置\n学过Java集合的人都应该看过张图(《Java编程思想》关于容器类库的简介图)\n ![](/img/java/collection.png)\n\n\n### 1. 构造方法\n个人认为学习一个类，应该先看其构造方法搞明白构造方法页面搞清楚了一半\n```\n      public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n\n    /**\n     * Constructs an empty <tt>HashMap</tt> with the specified initial\n     * capacity and the default load factor (0.75).\n     *\n     * @param  initialCapacity the initial capacity.\n     * @throws IllegalArgumentException if the initial capacity is negative.\n     */\n    public HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    }\n\n    /**\n     * Constructs an empty <tt>HashMap</tt> with the default initial capacity\n     * (16) and the default load factor (0.75).\n     */\n    public HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    }\n\n    /**\n     * Constructs a new <tt>HashMap</tt> with the same mappings as the\n     * specified <tt>Map</tt>.  The <tt>HashMap</tt> is created with\n     * default load factor (0.75) and an initial capacity sufficient to\n     * hold the mappings in the specified <tt>Map</tt>.\n     *\n     * @param   m the map whose mappings are to be placed in this map\n     * @throws  NullPointerException if the specified map is null\n     */\n    public HashMap(Map<? extends K, ? extends V> m) {\n        this.loadFactor = DEFAULT_LOAD_FACTOR;\n        putMapEntries(m, false);\n    }\n\n``` \n","source":"_posts/Java源码分析-一-HashMap.md","raw":"---\ntitle: Java源码分析(一)-HashMap\ndate: 2016-09-02 16:55:34\ntags:\n - Java\n\n---\n\nHashMap 在java集合中来说算是比较重要的一个类了。其源码也是在面试过程中经常被问的一道面试题。之前自己也大略的看过，现在抱着一起学习的态度，分析一下HashMap的源码。\n\n### 0. 所处位置\n学过Java集合的人都应该看过张图(《Java编程思想》关于容器类库的简介图)\n ![](/img/java/collection.png)\n\n\n### 1. 构造方法\n个人认为学习一个类，应该先看其构造方法搞明白构造方法页面搞清楚了一半\n```\n      public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n\n    /**\n     * Constructs an empty <tt>HashMap</tt> with the specified initial\n     * capacity and the default load factor (0.75).\n     *\n     * @param  initialCapacity the initial capacity.\n     * @throws IllegalArgumentException if the initial capacity is negative.\n     */\n    public HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    }\n\n    /**\n     * Constructs an empty <tt>HashMap</tt> with the default initial capacity\n     * (16) and the default load factor (0.75).\n     */\n    public HashMap() {\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    }\n\n    /**\n     * Constructs a new <tt>HashMap</tt> with the same mappings as the\n     * specified <tt>Map</tt>.  The <tt>HashMap</tt> is created with\n     * default load factor (0.75) and an initial capacity sufficient to\n     * hold the mappings in the specified <tt>Map</tt>.\n     *\n     * @param   m the map whose mappings are to be placed in this map\n     * @throws  NullPointerException if the specified map is null\n     */\n    public HashMap(Map<? extends K, ? extends V> m) {\n        this.loadFactor = DEFAULT_LOAD_FACTOR;\n        putMapEntries(m, false);\n    }\n\n``` \n","slug":"Java源码分析-一-HashMap","published":1,"updated":"2016-09-09T11:51:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvy9g0001dxs6qyb03hzz","content":"<p>HashMap 在java集合中来说算是比较重要的一个类了。其源码也是在面试过程中经常被问的一道面试题。之前自己也大略的看过，现在抱着一起学习的态度，分析一下HashMap的源码。</p>\n<h3 id=\"0-所处位置\"><a href=\"#0-所处位置\" class=\"headerlink\" title=\"0. 所处位置\"></a>0. 所处位置</h3><p>学过Java集合的人都应该看过张图(《Java编程思想》关于容器类库的简介图)<br> <img src=\"/img/java/collection.png\" alt=\"\"></p>\n<h3 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"1. 构造方法\"></a>1. 构造方法</h3><p>个人认为学习一个类，应该先看其构造方法搞明白构造方法页面搞清楚了一半</p>\n<pre><code>  public HashMap(int initialCapacity, float loadFactor) {\n    if (initialCapacity &lt; 0)\n        throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                           initialCapacity);\n    if (initialCapacity &gt; MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                           loadFactor);\n    this.loadFactor = loadFactor;\n    this.threshold = tableSizeFor(initialCapacity);\n}\n\n/**\n * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial\n * capacity and the default load factor (0.75).\n *\n * @param  initialCapacity the initial capacity.\n * @throws IllegalArgumentException if the initial capacity is negative.\n */\npublic HashMap(int initialCapacity) {\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\n/**\n * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity\n * (16) and the default load factor (0.75).\n */\npublic HashMap() {\n    this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n}\n\n/**\n * Constructs a new &lt;tt&gt;HashMap&lt;/tt&gt; with the same mappings as the\n * specified &lt;tt&gt;Map&lt;/tt&gt;.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with\n * default load factor (0.75) and an initial capacity sufficient to\n * hold the mappings in the specified &lt;tt&gt;Map&lt;/tt&gt;.\n *\n * @param   m the map whose mappings are to be placed in this map\n * @throws  NullPointerException if the specified map is null\n */\npublic HashMap(Map&lt;? extends K, ? extends V&gt; m) {\n    this.loadFactor = DEFAULT_LOAD_FACTOR;\n    putMapEntries(m, false);\n}\n</code></pre>","excerpt":"","more":"<p>HashMap 在java集合中来说算是比较重要的一个类了。其源码也是在面试过程中经常被问的一道面试题。之前自己也大略的看过，现在抱着一起学习的态度，分析一下HashMap的源码。</p>\n<h3 id=\"0-所处位置\"><a href=\"#0-所处位置\" class=\"headerlink\" title=\"0. 所处位置\"></a>0. 所处位置</h3><p>学过Java集合的人都应该看过张图(《Java编程思想》关于容器类库的简介图)<br> <img src=\"/img/java/collection.png\" alt=\"\"></p>\n<h3 id=\"1-构造方法\"><a href=\"#1-构造方法\" class=\"headerlink\" title=\"1. 构造方法\"></a>1. 构造方法</h3><p>个人认为学习一个类，应该先看其构造方法搞明白构造方法页面搞清楚了一半</p>\n<pre><code>  public HashMap(int initialCapacity, float loadFactor) {\n    if (initialCapacity &lt; 0)\n        throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                           initialCapacity);\n    if (initialCapacity &gt; MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                           loadFactor);\n    this.loadFactor = loadFactor;\n    this.threshold = tableSizeFor(initialCapacity);\n}\n\n/**\n * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial\n * capacity and the default load factor (0.75).\n *\n * @param  initialCapacity the initial capacity.\n * @throws IllegalArgumentException if the initial capacity is negative.\n */\npublic HashMap(int initialCapacity) {\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\n/**\n * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity\n * (16) and the default load factor (0.75).\n */\npublic HashMap() {\n    this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n}\n\n/**\n * Constructs a new &lt;tt&gt;HashMap&lt;/tt&gt; with the same mappings as the\n * specified &lt;tt&gt;Map&lt;/tt&gt;.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with\n * default load factor (0.75) and an initial capacity sufficient to\n * hold the mappings in the specified &lt;tt&gt;Map&lt;/tt&gt;.\n *\n * @param   m the map whose mappings are to be placed in this map\n * @throws  NullPointerException if the specified map is null\n */\npublic HashMap(Map&lt;? extends K, ? extends V&gt; m) {\n    this.loadFactor = DEFAULT_LOAD_FACTOR;\n    putMapEntries(m, false);\n}\n</code></pre>"},{"title":"Java源码分析(三)-HashSet","date":"2016-09-02T09:03:49.000Z","subtitle":"Keynote: JavaScript Modularization Journey","header-img":"/img/home-bg-o.jpg","_content":"\n\n\n@(示例笔记本)[马克飞象|帮助|Markdown]\n\n**马克飞象**是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：\n \n- **功能丰富** ：支持高亮代码块、*LaTeX* 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；\n- **得心应手** ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；\n- **深度整合** ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。\n","source":"_posts/Java源码分析-三-HashSet.md","raw":"---\n \ntitle: Java源码分析(三)-HashSet\ndate: 2016-09-02 17:03:49\nsubtitle:   \"Keynote: JavaScript Modularization Journey\"\nheader-img: \"/img/home-bg-o.jpg\"\ntags:\n - HashSet\n - ArrayList\n\n---\n\n\n\n@(示例笔记本)[马克飞象|帮助|Markdown]\n\n**马克飞象**是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：\n \n- **功能丰富** ：支持高亮代码块、*LaTeX* 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；\n- **得心应手** ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；\n- **深度整合** ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。\n","slug":"Java源码分析-三-HashSet","published":1,"updated":"2016-09-02T15:38:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvy9m0003dxs6nyvgaiyq","content":"<p>@(示例笔记本)[马克飞象|帮助|Markdown]</p>\n<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p>\n<ul>\n<li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li>\n<li><strong>得心应手</strong> ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；</li>\n<li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li>\n</ul>\n","excerpt":"","more":"<p>@(示例笔记本)[马克飞象|帮助|Markdown]</p>\n<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p>\n<ul>\n<li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li>\n<li><strong>得心应手</strong> ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web；</li>\n<li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li>\n</ul>\n"},{"title":"Java内部类详解","date":"2016-09-03T01:27:47.000Z","_content":"\n## 0.什么是内部类\n> 可以将一个类的定义放在另一个类的内部，这就是内部类。-《Java编程思想》\n\n**让我们先来看一段代码**\n \n```\n    public class InnerClassTest {\n    \t\n    \tpublic class InnerClass{\n    \t\tpublic void innerMethod(){\n    \t\t\tSystem.out.println(\"this is a inner class method\");\n    \t\t}\n    \t}\n    \tpublic static void main(String[] args) {\n    \t\t\n    \t\tInnerClassTest innerClassTest = new InnerClassTest();\n    \t\tInnerClass innerClass = innerClassTest.new InnerClass();\n    \t\tinnerClass.innerMethod();\t\n    \t}\n    \n    }\n```\n \n 上面的代码简单展示了内部类的定义和使用，\n 我们可以查看编译后的文件\n ![](/img/innerclass/innerclass01.png)\n## 1.内部类的种类\n######一般内部类可分为四种：\n* 成员内部类\n* 局部内部类\n* 嵌套内部类\n* 匿名内部类\n\n","source":"_posts/Java内部类详解.md","raw":"---\ntitle: Java内部类详解\ndate: 2016-09-03 09:27:47\ntags:\n\t- Java\n\t- Java内部类\t\n---\n\n## 0.什么是内部类\n> 可以将一个类的定义放在另一个类的内部，这就是内部类。-《Java编程思想》\n\n**让我们先来看一段代码**\n \n```\n    public class InnerClassTest {\n    \t\n    \tpublic class InnerClass{\n    \t\tpublic void innerMethod(){\n    \t\t\tSystem.out.println(\"this is a inner class method\");\n    \t\t}\n    \t}\n    \tpublic static void main(String[] args) {\n    \t\t\n    \t\tInnerClassTest innerClassTest = new InnerClassTest();\n    \t\tInnerClass innerClass = innerClassTest.new InnerClass();\n    \t\tinnerClass.innerMethod();\t\n    \t}\n    \n    }\n```\n \n 上面的代码简单展示了内部类的定义和使用，\n 我们可以查看编译后的文件\n ![](/img/innerclass/innerclass01.png)\n## 1.内部类的种类\n######一般内部类可分为四种：\n* 成员内部类\n* 局部内部类\n* 嵌套内部类\n* 匿名内部类\n\n","slug":"Java内部类详解","published":1,"updated":"2016-09-04T03:54:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvy9u0006dxs67nm6jnh1","content":"<h2 id=\"0-什么是内部类\"><a href=\"#0-什么是内部类\" class=\"headerlink\" title=\"0.什么是内部类\"></a>0.什么是内部类</h2><blockquote>\n<p>可以将一个类的定义放在另一个类的内部，这就是内部类。-《Java编程思想》</p>\n</blockquote>\n<p><strong>让我们先来看一段代码</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">InnerClassTest</span> &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">innerMethod</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\tSystem.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"this is a inner class method\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tInnerClassTest innerClassTest = <span class=\"keyword\">new</span> InnerClassTest();</div><div class=\"line\">\t\tInnerClass innerClass = innerClassTest.new InnerClass();</div><div class=\"line\">\t\tinnerClass.innerMethod();\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 上面的代码简单展示了内部类的定义和使用，<br> 我们可以查看编译后的文件<br> <img src=\"/img/innerclass/innerclass01.png\" alt=\"\"></p>\n<h2 id=\"1-内部类的种类\"><a href=\"#1-内部类的种类\" class=\"headerlink\" title=\"1.内部类的种类\"></a>1.内部类的种类</h2><p>######一般内部类可分为四种：</p>\n<ul>\n<li>成员内部类</li>\n<li>局部内部类</li>\n<li>嵌套内部类</li>\n<li>匿名内部类</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"0-什么是内部类\"><a href=\"#0-什么是内部类\" class=\"headerlink\" title=\"0.什么是内部类\"></a>0.什么是内部类</h2><blockquote>\n<p>可以将一个类的定义放在另一个类的内部，这就是内部类。-《Java编程思想》</p>\n</blockquote>\n<p><strong>让我们先来看一段代码</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">InnerClassTest</span> &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span>&#123;</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">innerMethod</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\tSystem.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"this is a inner class method\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(<span class=\"params\">String[] args</span>) </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tInnerClassTest innerClassTest = <span class=\"keyword\">new</span> InnerClassTest();</div><div class=\"line\">\t\tInnerClass innerClass = innerClassTest.new InnerClass();</div><div class=\"line\">\t\tinnerClass.innerMethod();\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 上面的代码简单展示了内部类的定义和使用，<br> 我们可以查看编译后的文件<br> <img src=\"/img/innerclass/innerclass01.png\" alt=\"\"></p>\n<h2 id=\"1-内部类的种类\"><a href=\"#1-内部类的种类\" class=\"headerlink\" title=\"1.内部类的种类\"></a>1.内部类的种类</h2><p>######一般内部类可分为四种：</p>\n<ul>\n<li>成员内部类</li>\n<li>局部内部类</li>\n<li>嵌套内部类</li>\n<li>匿名内部类</li>\n</ul>\n"},{"title":"iOS图片视频播放","date":"2015-09-13T01:51:46.000Z","_content":"","source":"_posts/iOS图片视频播放.md","raw":"title: iOS图片视频播放\ndate: 2015-09-13 09:51:46\ntags:\n---\n","slug":"iOS图片视频播放","published":1,"updated":"2015-09-13T01:51:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvy9x0008dxs6g92jko1t","content":"","excerpt":"","more":""},{"title":"iOS开发的代码结构","date":"2015-09-02T14:51:52.000Z","_content":"\n#### 0.iOS页面frame与数据\n\n  说到MVC，对于iOS开发者来说再熟悉不过了。MVC的程序开发模式，让开发变的更有条理，感谢那些为程序设计做出贡献的牛人\n\n  MVC在这里就不深入说了，我想说说别的，例如在开发中我们会发现，有的程序在没有网络的情况下是一片白色的页面什么都看不到（数据从网络获取），而有的程序则不同，虽然没有网络，但是会有页面的结构和占位图片等，\n\n  对于用户来说，肯定第二种的更友好一些。而这样的结构在开发时应该是让数据作为页面的一个属性，在数据属性值没有值时，构造页面，在这个属性有值的时候去重构界面，或者值改变的时候去重构界面，\n\n  说道这里我们会想到两个常用的方法\n\n``` bash\n  - (void)layoutSubviews\n```\n\n``` bash\n  - (void)setNeedsLayout\n```\n  我们来看看官方文档怎么解释这两个方法。\n\n  ![](/img/iOS/layoutSubviews.png)\n\n  红框里的话的意思是，“你不能直接调用这个方法。假如你想强制更新布局，需要调用setNeedLayout而不是去画页面更新，假如你想立即更新你的视图，可以调用layoutIfNeed\"\n\n  ![](/img/iOS/setlayout.png)\n\n#### 1.怎样创建一个数据与frame分离的view\n\n  好多同学在刚开始开发时，所有的代码都在viewDidLoad()方法中里，好些的将不同的view的初始化分成几个方法，不过仅仅这样还是远不够的，安装MVC的思想，我们可以分成controller，view，model但是view的创建往往会写的很混乱。\n\n  controller是管理一个页面的控制器，view就是这个控制器里所有被显示的东西。\n  例如我们创建一个view，假设这个view里只有一个简单的UIImageView,（数据多的话同理）我们需要从网络获取一个url而显示这张图片。如果网络没有数据我们也要现实这个imageView的结构，并且显示一个默认的图片。\n\n  1.创建一个名为TestView的view，然后创建一个UIImageView上需要显示图像的url\n\n  2.我们应该怎么创建Test，通常我们会重写他的init(或者initWithFrame:)方法\n","source":"_posts/iOS开发的代码结构.md","raw":"title: iOS开发的代码结构\ndate: 2015-09-02 22:51:52\ntags:\n---\n\n#### 0.iOS页面frame与数据\n\n  说到MVC，对于iOS开发者来说再熟悉不过了。MVC的程序开发模式，让开发变的更有条理，感谢那些为程序设计做出贡献的牛人\n\n  MVC在这里就不深入说了，我想说说别的，例如在开发中我们会发现，有的程序在没有网络的情况下是一片白色的页面什么都看不到（数据从网络获取），而有的程序则不同，虽然没有网络，但是会有页面的结构和占位图片等，\n\n  对于用户来说，肯定第二种的更友好一些。而这样的结构在开发时应该是让数据作为页面的一个属性，在数据属性值没有值时，构造页面，在这个属性有值的时候去重构界面，或者值改变的时候去重构界面，\n\n  说道这里我们会想到两个常用的方法\n\n``` bash\n  - (void)layoutSubviews\n```\n\n``` bash\n  - (void)setNeedsLayout\n```\n  我们来看看官方文档怎么解释这两个方法。\n\n  ![](/img/iOS/layoutSubviews.png)\n\n  红框里的话的意思是，“你不能直接调用这个方法。假如你想强制更新布局，需要调用setNeedLayout而不是去画页面更新，假如你想立即更新你的视图，可以调用layoutIfNeed\"\n\n  ![](/img/iOS/setlayout.png)\n\n#### 1.怎样创建一个数据与frame分离的view\n\n  好多同学在刚开始开发时，所有的代码都在viewDidLoad()方法中里，好些的将不同的view的初始化分成几个方法，不过仅仅这样还是远不够的，安装MVC的思想，我们可以分成controller，view，model但是view的创建往往会写的很混乱。\n\n  controller是管理一个页面的控制器，view就是这个控制器里所有被显示的东西。\n  例如我们创建一个view，假设这个view里只有一个简单的UIImageView,（数据多的话同理）我们需要从网络获取一个url而显示这张图片。如果网络没有数据我们也要现实这个imageView的结构，并且显示一个默认的图片。\n\n  1.创建一个名为TestView的view，然后创建一个UIImageView上需要显示图像的url\n\n  2.我们应该怎么创建Test，通常我们会重写他的init(或者initWithFrame:)方法\n","slug":"iOS开发的代码结构","published":1,"updated":"2016-10-09T12:28:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvy9z0009dxs6d1qrzjt2","content":"<h4 id=\"0-iOS页面frame与数据\"><a href=\"#0-iOS页面frame与数据\" class=\"headerlink\" title=\"0.iOS页面frame与数据\"></a>0.iOS页面frame与数据</h4><p>  说到MVC，对于iOS开发者来说再熟悉不过了。MVC的程序开发模式，让开发变的更有条理，感谢那些为程序设计做出贡献的牛人</p>\n<p>  MVC在这里就不深入说了，我想说说别的，例如在开发中我们会发现，有的程序在没有网络的情况下是一片白色的页面什么都看不到（数据从网络获取），而有的程序则不同，虽然没有网络，但是会有页面的结构和占位图片等，</p>\n<p>  对于用户来说，肯定第二种的更友好一些。而这样的结构在开发时应该是让数据作为页面的一个属性，在数据属性值没有值时，构造页面，在这个属性有值的时候去重构界面，或者值改变的时候去重构界面，</p>\n<p>  说道这里我们会想到两个常用的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)layoutSubviews</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)<span class=\"built_in\">set</span>NeedsLayout</div></pre></td></tr></table></figure>\n<p>  我们来看看官方文档怎么解释这两个方法。</p>\n<p>  <img src=\"/img/iOS/layoutSubviews.png\" alt=\"\"></p>\n<p>  红框里的话的意思是，“你不能直接调用这个方法。假如你想强制更新布局，需要调用setNeedLayout而不是去画页面更新，假如你想立即更新你的视图，可以调用layoutIfNeed”</p>\n<p>  <img src=\"/img/iOS/setlayout.png\" alt=\"\"></p>\n<h4 id=\"1-怎样创建一个数据与frame分离的view\"><a href=\"#1-怎样创建一个数据与frame分离的view\" class=\"headerlink\" title=\"1.怎样创建一个数据与frame分离的view\"></a>1.怎样创建一个数据与frame分离的view</h4><p>  好多同学在刚开始开发时，所有的代码都在viewDidLoad()方法中里，好些的将不同的view的初始化分成几个方法，不过仅仅这样还是远不够的，安装MVC的思想，我们可以分成controller，view，model但是view的创建往往会写的很混乱。</p>\n<p>  controller是管理一个页面的控制器，view就是这个控制器里所有被显示的东西。<br>  例如我们创建一个view，假设这个view里只有一个简单的UIImageView,（数据多的话同理）我们需要从网络获取一个url而显示这张图片。如果网络没有数据我们也要现实这个imageView的结构，并且显示一个默认的图片。</p>\n<p>  1.创建一个名为TestView的view，然后创建一个UIImageView上需要显示图像的url</p>\n<p>  2.我们应该怎么创建Test，通常我们会重写他的init(或者initWithFrame:)方法</p>\n","excerpt":"","more":"<h4 id=\"0-iOS页面frame与数据\"><a href=\"#0-iOS页面frame与数据\" class=\"headerlink\" title=\"0.iOS页面frame与数据\"></a>0.iOS页面frame与数据</h4><p>  说到MVC，对于iOS开发者来说再熟悉不过了。MVC的程序开发模式，让开发变的更有条理，感谢那些为程序设计做出贡献的牛人</p>\n<p>  MVC在这里就不深入说了，我想说说别的，例如在开发中我们会发现，有的程序在没有网络的情况下是一片白色的页面什么都看不到（数据从网络获取），而有的程序则不同，虽然没有网络，但是会有页面的结构和占位图片等，</p>\n<p>  对于用户来说，肯定第二种的更友好一些。而这样的结构在开发时应该是让数据作为页面的一个属性，在数据属性值没有值时，构造页面，在这个属性有值的时候去重构界面，或者值改变的时候去重构界面，</p>\n<p>  说道这里我们会想到两个常用的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)layoutSubviews</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)<span class=\"built_in\">set</span>NeedsLayout</div></pre></td></tr></table></figure>\n<p>  我们来看看官方文档怎么解释这两个方法。</p>\n<p>  <img src=\"/img/iOS/layoutSubviews.png\" alt=\"\"></p>\n<p>  红框里的话的意思是，“你不能直接调用这个方法。假如你想强制更新布局，需要调用setNeedLayout而不是去画页面更新，假如你想立即更新你的视图，可以调用layoutIfNeed”</p>\n<p>  <img src=\"/img/iOS/setlayout.png\" alt=\"\"></p>\n<h4 id=\"1-怎样创建一个数据与frame分离的view\"><a href=\"#1-怎样创建一个数据与frame分离的view\" class=\"headerlink\" title=\"1.怎样创建一个数据与frame分离的view\"></a>1.怎样创建一个数据与frame分离的view</h4><p>  好多同学在刚开始开发时，所有的代码都在viewDidLoad()方法中里，好些的将不同的view的初始化分成几个方法，不过仅仅这样还是远不够的，安装MVC的思想，我们可以分成controller，view，model但是view的创建往往会写的很混乱。</p>\n<p>  controller是管理一个页面的控制器，view就是这个控制器里所有被显示的东西。<br>  例如我们创建一个view，假设这个view里只有一个简单的UIImageView,（数据多的话同理）我们需要从网络获取一个url而显示这张图片。如果网络没有数据我们也要现实这个imageView的结构，并且显示一个默认的图片。</p>\n<p>  1.创建一个名为TestView的view，然后创建一个UIImageView上需要显示图像的url</p>\n<p>  2.我们应该怎么创建Test，通常我们会重写他的init(或者initWithFrame:)方法</p>\n"},{"title":"Java源码分析(二)-ArrayList","date":"2016-09-02T08:58:00.000Z","_content":"\n\n# 123\newrwrwrwer\n## 123\nwerwerwer\n## 2131312\nwerwerw\n### 123123\nwerwerw\n### 12312\n\n# 12323\n\n# 1232\n\n","source":"_posts/Java源码分析-二-ArrayList.md","raw":"---\ntitle: Java源码分析(二)-ArrayList\ndate: 2016-09-02 16:58:00\ntags:\n    - Java\n    - ArrayList\n---\n\n\n# 123\newrwrwrwer\n## 123\nwerwerwer\n## 2131312\nwerwerw\n### 123123\nwerwerw\n### 12312\n\n# 12323\n\n# 1232\n\n","slug":"Java源码分析-二-ArrayList","published":1,"updated":"2016-09-02T11:14:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvya2000cdxs6pvke0yav","content":"<h1 id=\"123\"><a href=\"#123\" class=\"headerlink\" title=\"123\"></a>123</h1><p>ewrwrwrwer</p>\n<h2 id=\"123-1\"><a href=\"#123-1\" class=\"headerlink\" title=\"123\"></a>123</h2><p>werwerwer</p>\n<h2 id=\"2131312\"><a href=\"#2131312\" class=\"headerlink\" title=\"2131312\"></a>2131312</h2><p>werwerw</p>\n<h3 id=\"123123\"><a href=\"#123123\" class=\"headerlink\" title=\"123123\"></a>123123</h3><p>werwerw</p>\n<h3 id=\"12312\"><a href=\"#12312\" class=\"headerlink\" title=\"12312\"></a>12312</h3><h1 id=\"12323\"><a href=\"#12323\" class=\"headerlink\" title=\"12323\"></a>12323</h1><h1 id=\"1232\"><a href=\"#1232\" class=\"headerlink\" title=\"1232\"></a>1232</h1>","excerpt":"","more":"<h1 id=\"123\"><a href=\"#123\" class=\"headerlink\" title=\"123\"></a>123</h1><p>ewrwrwrwer</p>\n<h2 id=\"123-1\"><a href=\"#123-1\" class=\"headerlink\" title=\"123\"></a>123</h2><p>werwerwer</p>\n<h2 id=\"2131312\"><a href=\"#2131312\" class=\"headerlink\" title=\"2131312\"></a>2131312</h2><p>werwerw</p>\n<h3 id=\"123123\"><a href=\"#123123\" class=\"headerlink\" title=\"123123\"></a>123123</h3><p>werwerw</p>\n<h3 id=\"12312\"><a href=\"#12312\" class=\"headerlink\" title=\"12312\"></a>12312</h3><h1 id=\"12323\"><a href=\"#12323\" class=\"headerlink\" title=\"12323\"></a>12323</h1><h1 id=\"1232\"><a href=\"#1232\" class=\"headerlink\" title=\"1232\"></a>1232</h1>"},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2015-08-23T14:00:53.000Z","updated":"2015-08-23T14:04:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvya4000ddxs68yicljmb","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"UIKit学习总结","date":"2015-08-30T14:30:50.000Z","_content":"\n### UIKit  应该是iOS开发中最重的工具包了吧。\n##### 0.关于UIKit中比较重要的类\n\n&nbsp;&nbsp;&nbsp;&nbsp;一定要去官网[UIKit Framework Reference](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKit_Framework/index.html#//apple_ref/doc/uid/TP40006955)找最权威的资料。其树形结构已经很直观告诉其中类之间的关系\n\n##### 1.UIWindow\n\n&nbsp;&nbsp;&nbsp;&nbsp;之所以将这个类放在第一位是因为在每个iOS项目的AppDelegate文件中有这么一个成员变量。而且我们还会个它设置一个rootViewController\n\n``` bash\n    self.window.rootViewController = xxViewController\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;而这个window就是指的当前设备的屏幕。就是把viewController中管理的页面数据加载到设备上去。\n\n##### 2.UIViewController\n\n&nbsp;&nbsp;&nbsp;&nbsp;大家都知道iOS开发算是把MVC模式用到了极致，viewController就是管理view的控制器,我们可以在controller中构建页面样式，加载页面数据，做这个页面展示需要做的所有工作，然后把控制器交给window(设备)就好。当然根控制器只能有一个但是我们可以通过控制器之间的切换来示不同的页面。\n\n&nbsp;&nbsp;&nbsp;&nbsp;常见的viewController\n\n ![](/images)\n\n&nbsp;&nbsp;&nbsp;&nbsp;其中红色的框中的controller为常用的视图控制器，当然也可以不是用UIViewController的这个子控制器，直接使用UIViewController然后在其中添加各种view.(其实各种控制器只是默认在在UIViewController中加好了对应的view，实现了对应协议的方法而已）\n\n##### 2.UIView\n&nbsp;&nbsp;&nbsp;&nbsp;图上已经标出几个比较常用的view\n  ![](/img/iOS/uiview.png)\n\n##### 3.UIGestureRecognizer\n&nbsp;&nbsp;&nbsp;&nbsp;关于手势识别的view\n   ![](/img/iOS/gesture.png)\n","source":"_posts/UIKit学习总结.md","raw":"title: UIKit学习总结\ndate: 2015-08-30 22:30:50\ntags: iOS\n---\n\n### UIKit  应该是iOS开发中最重的工具包了吧。\n##### 0.关于UIKit中比较重要的类\n\n&nbsp;&nbsp;&nbsp;&nbsp;一定要去官网[UIKit Framework Reference](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKit_Framework/index.html#//apple_ref/doc/uid/TP40006955)找最权威的资料。其树形结构已经很直观告诉其中类之间的关系\n\n##### 1.UIWindow\n\n&nbsp;&nbsp;&nbsp;&nbsp;之所以将这个类放在第一位是因为在每个iOS项目的AppDelegate文件中有这么一个成员变量。而且我们还会个它设置一个rootViewController\n\n``` bash\n    self.window.rootViewController = xxViewController\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;而这个window就是指的当前设备的屏幕。就是把viewController中管理的页面数据加载到设备上去。\n\n##### 2.UIViewController\n\n&nbsp;&nbsp;&nbsp;&nbsp;大家都知道iOS开发算是把MVC模式用到了极致，viewController就是管理view的控制器,我们可以在controller中构建页面样式，加载页面数据，做这个页面展示需要做的所有工作，然后把控制器交给window(设备)就好。当然根控制器只能有一个但是我们可以通过控制器之间的切换来示不同的页面。\n\n&nbsp;&nbsp;&nbsp;&nbsp;常见的viewController\n\n ![](/images)\n\n&nbsp;&nbsp;&nbsp;&nbsp;其中红色的框中的controller为常用的视图控制器，当然也可以不是用UIViewController的这个子控制器，直接使用UIViewController然后在其中添加各种view.(其实各种控制器只是默认在在UIViewController中加好了对应的view，实现了对应协议的方法而已）\n\n##### 2.UIView\n&nbsp;&nbsp;&nbsp;&nbsp;图上已经标出几个比较常用的view\n  ![](/img/iOS/uiview.png)\n\n##### 3.UIGestureRecognizer\n&nbsp;&nbsp;&nbsp;&nbsp;关于手势识别的view\n   ![](/img/iOS/gesture.png)\n","slug":"UIKit学习总结","published":1,"updated":"2016-10-09T12:30:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvya6000fdxs62tt3b3ym","content":"<h3 id=\"UIKit-应该是iOS开发中最重的工具包了吧。\"><a href=\"#UIKit-应该是iOS开发中最重的工具包了吧。\" class=\"headerlink\" title=\"UIKit  应该是iOS开发中最重的工具包了吧。\"></a>UIKit  应该是iOS开发中最重的工具包了吧。</h3><h5 id=\"0-关于UIKit中比较重要的类\"><a href=\"#0-关于UIKit中比较重要的类\" class=\"headerlink\" title=\"0.关于UIKit中比较重要的类\"></a>0.关于UIKit中比较重要的类</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;一定要去官网<a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKit_Framework/index.html#//apple_ref/doc/uid/TP40006955\" target=\"_blank\" rel=\"external\">UIKit Framework Reference</a>找最权威的资料。其树形结构已经很直观告诉其中类之间的关系</p>\n<h5 id=\"1-UIWindow\"><a href=\"#1-UIWindow\" class=\"headerlink\" title=\"1.UIWindow\"></a>1.UIWindow</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;之所以将这个类放在第一位是因为在每个iOS项目的AppDelegate文件中有这么一个成员变量。而且我们还会个它设置一个rootViewController</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.window.rootViewController = xxViewController</div></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;而这个window就是指的当前设备的屏幕。就是把viewController中管理的页面数据加载到设备上去。</p>\n<h5 id=\"2-UIViewController\"><a href=\"#2-UIViewController\" class=\"headerlink\" title=\"2.UIViewController\"></a>2.UIViewController</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;大家都知道iOS开发算是把MVC模式用到了极致，viewController就是管理view的控制器,我们可以在controller中构建页面样式，加载页面数据，做这个页面展示需要做的所有工作，然后把控制器交给window(设备)就好。当然根控制器只能有一个但是我们可以通过控制器之间的切换来示不同的页面。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;常见的viewController</p>\n<p> <img src=\"/images\" alt=\"\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;其中红色的框中的controller为常用的视图控制器，当然也可以不是用UIViewController的这个子控制器，直接使用UIViewController然后在其中添加各种view.(其实各种控制器只是默认在在UIViewController中加好了对应的view，实现了对应协议的方法而已）</p>\n<h5 id=\"2-UIView\"><a href=\"#2-UIView\" class=\"headerlink\" title=\"2.UIView\"></a>2.UIView</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;图上已经标出几个比较常用的view<br>  <img src=\"/img/iOS/uiview.png\" alt=\"\"></p>\n<h5 id=\"3-UIGestureRecognizer\"><a href=\"#3-UIGestureRecognizer\" class=\"headerlink\" title=\"3.UIGestureRecognizer\"></a>3.UIGestureRecognizer</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;关于手势识别的view<br>   <img src=\"/img/iOS/gesture.png\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"UIKit-应该是iOS开发中最重的工具包了吧。\"><a href=\"#UIKit-应该是iOS开发中最重的工具包了吧。\" class=\"headerlink\" title=\"UIKit  应该是iOS开发中最重的工具包了吧。\"></a>UIKit  应该是iOS开发中最重的工具包了吧。</h3><h5 id=\"0-关于UIKit中比较重要的类\"><a href=\"#0-关于UIKit中比较重要的类\" class=\"headerlink\" title=\"0.关于UIKit中比较重要的类\"></a>0.关于UIKit中比较重要的类</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;一定要去官网<a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKit_Framework/index.html#//apple_ref/doc/uid/TP40006955\">UIKit Framework Reference</a>找最权威的资料。其树形结构已经很直观告诉其中类之间的关系</p>\n<h5 id=\"1-UIWindow\"><a href=\"#1-UIWindow\" class=\"headerlink\" title=\"1.UIWindow\"></a>1.UIWindow</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;之所以将这个类放在第一位是因为在每个iOS项目的AppDelegate文件中有这么一个成员变量。而且我们还会个它设置一个rootViewController</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.window.rootViewController = xxViewController</div></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;而这个window就是指的当前设备的屏幕。就是把viewController中管理的页面数据加载到设备上去。</p>\n<h5 id=\"2-UIViewController\"><a href=\"#2-UIViewController\" class=\"headerlink\" title=\"2.UIViewController\"></a>2.UIViewController</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;大家都知道iOS开发算是把MVC模式用到了极致，viewController就是管理view的控制器,我们可以在controller中构建页面样式，加载页面数据，做这个页面展示需要做的所有工作，然后把控制器交给window(设备)就好。当然根控制器只能有一个但是我们可以通过控制器之间的切换来示不同的页面。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;常见的viewController</p>\n<p> <img src=\"/images\" alt=\"\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;其中红色的框中的controller为常用的视图控制器，当然也可以不是用UIViewController的这个子控制器，直接使用UIViewController然后在其中添加各种view.(其实各种控制器只是默认在在UIViewController中加好了对应的view，实现了对应协议的方法而已）</p>\n<h5 id=\"2-UIView\"><a href=\"#2-UIView\" class=\"headerlink\" title=\"2.UIView\"></a>2.UIView</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;图上已经标出几个比较常用的view<br>  <img src=\"/img/iOS/uiview.png\" alt=\"\"></p>\n<h5 id=\"3-UIGestureRecognizer\"><a href=\"#3-UIGestureRecognizer\" class=\"headerlink\" title=\"3.UIGestureRecognizer\"></a>3.UIGestureRecognizer</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;关于手势识别的view<br>   <img src=\"/img/iOS/gesture.png\" alt=\"\"></p>\n"},{"title":"iOS（iOS7+）开发中的常用的Tips","date":"2015-09-01T14:55:25.000Z","_content":"\n##### 0.设置状态栏颜色反转\n\n```bash\n    [self.navigationBar setBarStyle:UIBarStyleBlack];\n```\n\n##### 1.将导航栏的背景设为透明（默认是半透明状态）\n\n```java\n  [self.navigationController.navigationBar setBackgroundImage:[[UIImage alloc]init] forBarMetrics:UIBarMetricsDefault];\n```\n##### 2.xcode6配置pch文件\n\n   ![](/img/iOS/pch.png)\n","source":"_posts/iOS（iOS7-）开发中的常用的Tips.md","raw":"title: iOS（iOS7+）开发中的常用的Tips\ndate: 2015-09-01 22:55:25\ntags: iOS\n---\n\n##### 0.设置状态栏颜色反转\n\n```bash\n    [self.navigationBar setBarStyle:UIBarStyleBlack];\n```\n\n##### 1.将导航栏的背景设为透明（默认是半透明状态）\n\n```java\n  [self.navigationController.navigationBar setBackgroundImage:[[UIImage alloc]init] forBarMetrics:UIBarMetricsDefault];\n```\n##### 2.xcode6配置pch文件\n\n   ![](/img/iOS/pch.png)\n","slug":"iOS（iOS7-）开发中的常用的Tips","published":1,"updated":"2016-10-09T12:28:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvya7000gdxs68pohz2rz","content":"<h5 id=\"0-设置状态栏颜色反转\"><a href=\"#0-设置状态栏颜色反转\" class=\"headerlink\" title=\"0.设置状态栏颜色反转\"></a>0.设置状态栏颜色反转</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self.navigationBar <span class=\"built_in\">set</span>BarStyle:UIBarStyleBlack];</div></pre></td></tr></table></figure>\n<h5 id=\"1-将导航栏的背景设为透明（默认是半透明状态）\"><a href=\"#1-将导航栏的背景设为透明（默认是半透明状态）\" class=\"headerlink\" title=\"1.将导航栏的背景设为透明（默认是半透明状态）\"></a>1.将导航栏的背景设为透明（默认是半透明状态）</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self.navigationController.navigationBar setBackgroundImage:[[UIImage alloc]init] forBarMetrics:UIBarMetricsDefault];</div></pre></td></tr></table></figure>\n<h5 id=\"2-xcode6配置pch文件\"><a href=\"#2-xcode6配置pch文件\" class=\"headerlink\" title=\"2.xcode6配置pch文件\"></a>2.xcode6配置pch文件</h5><p>   <img src=\"/img/iOS/pch.png\" alt=\"\"></p>\n","excerpt":"","more":"<h5 id=\"0-设置状态栏颜色反转\"><a href=\"#0-设置状态栏颜色反转\" class=\"headerlink\" title=\"0.设置状态栏颜色反转\"></a>0.设置状态栏颜色反转</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self.navigationBar <span class=\"built_in\">set</span>BarStyle:UIBarStyleBlack];</div></pre></td></tr></table></figure>\n<h5 id=\"1-将导航栏的背景设为透明（默认是半透明状态）\"><a href=\"#1-将导航栏的背景设为透明（默认是半透明状态）\" class=\"headerlink\" title=\"1.将导航栏的背景设为透明（默认是半透明状态）\"></a>1.将导航栏的背景设为透明（默认是半透明状态）</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[self.navigationController.navigationBar setBackgroundImage:[[UIImage alloc]init] forBarMetrics:UIBarMetricsDefault];</div></pre></td></tr></table></figure>\n<h5 id=\"2-xcode6配置pch文件\"><a href=\"#2-xcode6配置pch文件\" class=\"headerlink\" title=\"2.xcode6配置pch文件\"></a>2.xcode6配置pch文件</h5><p>   <img src=\"/img/iOS/pch.png\" alt=\"\"></p>\n"},{"title":"《深入理解Java虚拟机》读书笔记-(一)","date":"2016-09-25T10:53:22.000Z","_content":"\n### 0.简介\n","source":"_posts/《深入理解Java虚拟机》读书笔记-一.md","raw":"---\ntitle: 《深入理解Java虚拟机》读书笔记-(一)\ndate: 2016-09-25 18:53:22\ntags:\n\t- Java\n\t- 深入理解Java虚拟机\n---\n\n### 0.简介\n","slug":"《深入理解Java虚拟机》读书笔记-一","published":1,"updated":"2016-10-09T13:02:20.000Z","_id":"ciu2mvyab000idxs63e706zpu","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"0-简介\"><a href=\"#0-简介\" class=\"headerlink\" title=\"0.简介\"></a>0.简介</h3>","excerpt":"","more":"<h3 id=\"0-简介\"><a href=\"#0-简介\" class=\"headerlink\" title=\"0.简介\"></a>0.简介</h3>"},{"title":"博客说明","date":"2016-09-01T05:44:13.000Z","_content":"\n上大学时在CSDN上写过几遍总计性质的博客，后来工作了用基本没有写，许多东西总结在了印象笔记里（感觉还不错，有忘记了的代码段或者其他就去印象笔记里翻翻）,最近时间比较充裕，把之前自己总结的东西写出来分享给大家，如有问题请留言或者评论或者微博私信（联系方式见首页）。也希望能和各路小伙伴成为好朋友，共同进步。\n","source":"_posts/博客说明.md","raw":"---\ntitle: 博客说明\ndate: 2016-09-01 13:44:13\ntags:\n\n---\n\n上大学时在CSDN上写过几遍总计性质的博客，后来工作了用基本没有写，许多东西总结在了印象笔记里（感觉还不错，有忘记了的代码段或者其他就去印象笔记里翻翻）,最近时间比较充裕，把之前自己总结的东西写出来分享给大家，如有问题请留言或者评论或者微博私信（联系方式见首页）。也希望能和各路小伙伴成为好朋友，共同进步。\n","slug":"博客说明","published":1,"updated":"2016-09-09T11:51:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvyac000kdxs6a2epwqsp","content":"<p>上大学时在CSDN上写过几遍总计性质的博客，后来工作了用基本没有写，许多东西总结在了印象笔记里（感觉还不错，有忘记了的代码段或者其他就去印象笔记里翻翻）,最近时间比较充裕，把之前自己总结的东西写出来分享给大家，如有问题请留言或者评论或者微博私信（联系方式见首页）。也希望能和各路小伙伴成为好朋友，共同进步。</p>\n","excerpt":"","more":"<p>上大学时在CSDN上写过几遍总计性质的博客，后来工作了用基本没有写，许多东西总结在了印象笔记里（感觉还不错，有忘记了的代码段或者其他就去印象笔记里翻翻）,最近时间比较充裕，把之前自己总结的东西写出来分享给大家，如有问题请留言或者评论或者微博私信（联系方式见首页）。也希望能和各路小伙伴成为好朋友，共同进步。</p>\n"},{"title":"使用lombok简化Java代码","date":"2016-10-09T11:53:34.000Z","_content":"","source":"_posts/使用lombok简化Java代码.md","raw":"---\ntitle: 使用lombok简化Java代码\ndate: 2016-10-09 19:53:34\ntags:\n---\n","slug":"使用lombok简化Java代码","published":1,"updated":"2016-10-09T11:53:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvyag000ndxs6hg6udol0","content":"","excerpt":"","more":""},{"title":"学吉他","date":"2015-09-05T12:04:10.000Z","_content":"\n舍友买了把吉他，没事的时候自己也学学，怎么说呢，感觉很有意思，音乐确实是个比较有趣的东西。\n","source":"_posts/学吉他.md","raw":"title: 学吉他\ndate: 2015-09-05 20:04:10\ntags:\n---\n\n舍友买了把吉他，没事的时候自己也学学，怎么说呢，感觉很有意思，音乐确实是个比较有趣的东西。\n","slug":"学吉他","published":1,"updated":"2015-09-06T00:09:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvyah000odxs6pziq0k7w","content":"<p>舍友买了把吉他，没事的时候自己也学学，怎么说呢，感觉很有意思，音乐确实是个比较有趣的东西。</p>\n","excerpt":"","more":"<p>舍友买了把吉他，没事的时候自己也学学，怎么说呢，感觉很有意思，音乐确实是个比较有趣的东西。</p>\n"},{"title":"算法(三)-常用数据结构的定义","subtitle":"java实现","date":"2016-09-12T11:47:51.000Z","_content":"\n\t说明：文章的数据结构是基于Java总结的,java中使用的数据结构就是数组和引用（就是指针）\n\n常用的数据结构有栈，队列，链表，树，图等的数据结构的定义。\n个人觉得了解一种数据结构必须了解它的定义，明白了定义我们就知道如何去扩展。\n\n### 栈 -->本质是数组\njava中Stack类继承自Vector，而Vector的实现是基于数组的\n\n### 队列 -->本质也是数组\nJava中常用的队列就是PriorityQueue 其实现是基于数据的\n\n### 链表一般会分为单链表,循环链表,双向链表\n链表，链表顾名思义就是要连起来么，即当前数据应该了下一个数据是有关联的。\n单链表的基本结构的定义\n\n```\npublic class LinkList<T>{\n\tT data;\n\tLinkList<T> next;\n\tpublic LinkList(T value){\n\t\tthis.data = value;\n\t}\t\n}\n```\n\n循环链表的数据结构和单链表相同，只是最后一个元素和第一个元素相连，单链表的最一个元素是null,\n\n双向链表：从字面上理解可知道元素之间的关联是双向的，当前元素不仅和下一个有联系，应该和上一个元素也有关系。我们便可以在单链表的基础上修改成双链表，结构如下\n\n```\npublic class LinkList<T>{\n\tT data;\n\tLinkList<T> next;\n\tLinkList<T> pre;\n\tpublic LinkList(T value){\n\t\tthis.data = value;\n\t}\t\n}\n```\n\n### 树 \n树中最重要的莫过于二叉树了，二叉树树的数据结构和链表是类似的(树的一种比较极端的例子就是一棵树只有左子树或者只有右子树，那么其就够就是链表，其本质是相同的区别就在于怎么连)。至于其它树的结构在二叉树的基础上扩展即可，不再详细赘述。\n\n```\npublic class Tree<T>{\n\tT data;\n\tTree<T> left;\n\tTree<T> right;\n\tpublic Tree(T value){\n\t\tthis.data = value;\n\t}\t\n}\n```\n\n### 图\ns\n\n","source":"_posts/算法-三-常用数据结构的定义.md","raw":"---\ntitle: 算法(三)-常用数据结构的定义\nsubtitle:   \"java实现\"\ndate: 2016-09-12 19:47:51\ntags:\n\t- 算法\n\t- Java\n\t- 数据结构\n---\n\n\t说明：文章的数据结构是基于Java总结的,java中使用的数据结构就是数组和引用（就是指针）\n\n常用的数据结构有栈，队列，链表，树，图等的数据结构的定义。\n个人觉得了解一种数据结构必须了解它的定义，明白了定义我们就知道如何去扩展。\n\n### 栈 -->本质是数组\njava中Stack类继承自Vector，而Vector的实现是基于数组的\n\n### 队列 -->本质也是数组\nJava中常用的队列就是PriorityQueue 其实现是基于数据的\n\n### 链表一般会分为单链表,循环链表,双向链表\n链表，链表顾名思义就是要连起来么，即当前数据应该了下一个数据是有关联的。\n单链表的基本结构的定义\n\n```\npublic class LinkList<T>{\n\tT data;\n\tLinkList<T> next;\n\tpublic LinkList(T value){\n\t\tthis.data = value;\n\t}\t\n}\n```\n\n循环链表的数据结构和单链表相同，只是最后一个元素和第一个元素相连，单链表的最一个元素是null,\n\n双向链表：从字面上理解可知道元素之间的关联是双向的，当前元素不仅和下一个有联系，应该和上一个元素也有关系。我们便可以在单链表的基础上修改成双链表，结构如下\n\n```\npublic class LinkList<T>{\n\tT data;\n\tLinkList<T> next;\n\tLinkList<T> pre;\n\tpublic LinkList(T value){\n\t\tthis.data = value;\n\t}\t\n}\n```\n\n### 树 \n树中最重要的莫过于二叉树了，二叉树树的数据结构和链表是类似的(树的一种比较极端的例子就是一棵树只有左子树或者只有右子树，那么其就够就是链表，其本质是相同的区别就在于怎么连)。至于其它树的结构在二叉树的基础上扩展即可，不再详细赘述。\n\n```\npublic class Tree<T>{\n\tT data;\n\tTree<T> left;\n\tTree<T> right;\n\tpublic Tree(T value){\n\t\tthis.data = value;\n\t}\t\n}\n```\n\n### 图\ns\n\n","slug":"算法-三-常用数据结构的定义","published":1,"updated":"2016-09-23T13:06:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvyaj000qdxs6o84kw7db","content":"<pre><code>说明：文章的数据结构是基于Java总结的,java中使用的数据结构就是数组和引用（就是指针）\n</code></pre><p>常用的数据结构有栈，队列，链表，树，图等的数据结构的定义。<br>个人觉得了解一种数据结构必须了解它的定义，明白了定义我们就知道如何去扩展。</p>\n<h3 id=\"栈-–-gt-本质是数组\"><a href=\"#栈-–-gt-本质是数组\" class=\"headerlink\" title=\"栈 –&gt;本质是数组\"></a>栈 –&gt;本质是数组</h3><p>java中Stack类继承自Vector，而Vector的实现是基于数组的</p>\n<h3 id=\"队列-–-gt-本质也是数组\"><a href=\"#队列-–-gt-本质也是数组\" class=\"headerlink\" title=\"队列 –&gt;本质也是数组\"></a>队列 –&gt;本质也是数组</h3><p>Java中常用的队列就是PriorityQueue 其实现是基于数据的</p>\n<h3 id=\"链表一般会分为单链表-循环链表-双向链表\"><a href=\"#链表一般会分为单链表-循环链表-双向链表\" class=\"headerlink\" title=\"链表一般会分为单链表,循环链表,双向链表\"></a>链表一般会分为单链表,循环链表,双向链表</h3><p>链表，链表顾名思义就是要连起来么，即当前数据应该了下一个数据是有关联的。<br>单链表的基本结构的定义</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span>&lt;<span class=\"type\">T</span>&gt;</span>&#123;</div><div class=\"line\">\tT <span class=\"keyword\">data</span>;</div><div class=\"line\">\tLinkList&lt;T&gt; next;</div><div class=\"line\">\t<span class=\"keyword\">public</span> LinkList(T value)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = value;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>循环链表的数据结构和单链表相同，只是最后一个元素和第一个元素相连，单链表的最一个元素是null,</p>\n<p>双向链表：从字面上理解可知道元素之间的关联是双向的，当前元素不仅和下一个有联系，应该和上一个元素也有关系。我们便可以在单链表的基础上修改成双链表，结构如下</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span>&lt;<span class=\"type\">T</span>&gt;</span>&#123;</div><div class=\"line\">\tT <span class=\"keyword\">data</span>;</div><div class=\"line\">\tLinkList&lt;T&gt; next;</div><div class=\"line\">\tLinkList&lt;T&gt; pre;</div><div class=\"line\">\t<span class=\"keyword\">public</span> LinkList(T value)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = value;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h3><p>树中最重要的莫过于二叉树了，二叉树树的数据结构和链表是类似的(树的一种比较极端的例子就是一棵树只有左子树或者只有右子树，那么其就够就是链表，其本质是相同的区别就在于怎么连)。至于其它树的结构在二叉树的基础上扩展即可，不再详细赘述。</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Tree&lt;<span class=\"built_in\">T</span>&gt;&#123;</div><div class=\"line\">\t<span class=\"built_in\">T</span> data;</div><div class=\"line\">\tTree&lt;<span class=\"built_in\">T</span>&gt; <span class=\"built_in\">left</span>;</div><div class=\"line\">\tTree&lt;<span class=\"built_in\">T</span>&gt; <span class=\"built_in\">right</span>;</div><div class=\"line\">\tpublic Tree(<span class=\"built_in\">T</span> <span class=\"built_in\">value</span>)&#123;</div><div class=\"line\">\t\tthis.data = <span class=\"built_in\">value</span>;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h3><p>s</p>\n","excerpt":"","more":"<pre><code>说明：文章的数据结构是基于Java总结的,java中使用的数据结构就是数组和引用（就是指针）\n</code></pre><p>常用的数据结构有栈，队列，链表，树，图等的数据结构的定义。<br>个人觉得了解一种数据结构必须了解它的定义，明白了定义我们就知道如何去扩展。</p>\n<h3 id=\"栈-–-gt-本质是数组\"><a href=\"#栈-–-gt-本质是数组\" class=\"headerlink\" title=\"栈 –&gt;本质是数组\"></a>栈 –&gt;本质是数组</h3><p>java中Stack类继承自Vector，而Vector的实现是基于数组的</p>\n<h3 id=\"队列-–-gt-本质也是数组\"><a href=\"#队列-–-gt-本质也是数组\" class=\"headerlink\" title=\"队列 –&gt;本质也是数组\"></a>队列 –&gt;本质也是数组</h3><p>Java中常用的队列就是PriorityQueue 其实现是基于数据的</p>\n<h3 id=\"链表一般会分为单链表-循环链表-双向链表\"><a href=\"#链表一般会分为单链表-循环链表-双向链表\" class=\"headerlink\" title=\"链表一般会分为单链表,循环链表,双向链表\"></a>链表一般会分为单链表,循环链表,双向链表</h3><p>链表，链表顾名思义就是要连起来么，即当前数据应该了下一个数据是有关联的。<br>单链表的基本结构的定义</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span>&lt;<span class=\"type\">T</span>&gt;</span>&#123;</div><div class=\"line\">\tT <span class=\"keyword\">data</span>;</div><div class=\"line\">\tLinkList&lt;T&gt; next;</div><div class=\"line\">\t<span class=\"keyword\">public</span> LinkList(T value)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = value;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>循环链表的数据结构和单链表相同，只是最后一个元素和第一个元素相连，单链表的最一个元素是null,</p>\n<p>双向链表：从字面上理解可知道元素之间的关联是双向的，当前元素不仅和下一个有联系，应该和上一个元素也有关系。我们便可以在单链表的基础上修改成双链表，结构如下</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span>&lt;<span class=\"type\">T</span>&gt;</span>&#123;</div><div class=\"line\">\tT <span class=\"keyword\">data</span>;</div><div class=\"line\">\tLinkList&lt;T&gt; next;</div><div class=\"line\">\tLinkList&lt;T&gt; pre;</div><div class=\"line\">\t<span class=\"keyword\">public</span> LinkList(T value)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"keyword\">data</span> = value;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h3><p>树中最重要的莫过于二叉树了，二叉树树的数据结构和链表是类似的(树的一种比较极端的例子就是一棵树只有左子树或者只有右子树，那么其就够就是链表，其本质是相同的区别就在于怎么连)。至于其它树的结构在二叉树的基础上扩展即可，不再详细赘述。</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Tree&lt;<span class=\"built_in\">T</span>&gt;&#123;</div><div class=\"line\">\t<span class=\"built_in\">T</span> data;</div><div class=\"line\">\tTree&lt;<span class=\"built_in\">T</span>&gt; <span class=\"built_in\">left</span>;</div><div class=\"line\">\tTree&lt;<span class=\"built_in\">T</span>&gt; <span class=\"built_in\">right</span>;</div><div class=\"line\">\tpublic Tree(<span class=\"built_in\">T</span> <span class=\"built_in\">value</span>)&#123;</div><div class=\"line\">\t\tthis.data = <span class=\"built_in\">value</span>;</div><div class=\"line\">\t&#125;\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h3><p>s</p>\n"},{"title":"我的iOS开发之路","date":"2015-08-23T14:20:38.000Z","_content":"######谨以此文记录我的学习之路\n###0.入门\n    我iOS入门基本是靠自学，看官网的文档和实例代码，看过网上的视频教程，看外国的网站，也看别人写的代码。\n    我是14年开始学的这在近两年的学习和开发过程中收获和很多，\n\n####下面是我常去的一些网站\n","source":"_posts/测试文章.md","raw":"title: 我的iOS开发之路\n\ndate: 2015-08-23 22:20:38\ntags: iOS\n---\n######谨以此文记录我的学习之路\n###0.入门\n    我iOS入门基本是靠自学，看官网的文档和实例代码，看过网上的视频教程，看外国的网站，也看别人写的代码。\n    我是14年开始学的这在近两年的学习和开发过程中收获和很多，\n\n####下面是我常去的一些网站\n","slug":"测试文章","published":1,"updated":"2015-08-30T14:29:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvyal000sdxs689xt0vrv","content":"<p>######谨以此文记录我的学习之路</p>\n<p>###0.入门<br>    我iOS入门基本是靠自学，看官网的文档和实例代码，看过网上的视频教程，看外国的网站，也看别人写的代码。<br>    我是14年开始学的这在近两年的学习和开发过程中收获和很多，</p>\n<p>####下面是我常去的一些网站</p>\n","excerpt":"","more":"<p>######谨以此文记录我的学习之路</p>\n<p>###0.入门<br>    我iOS入门基本是靠自学，看官网的文档和实例代码，看过网上的视频教程，看外国的网站，也看别人写的代码。<br>    我是14年开始学的这在近两年的学习和开发过程中收获和很多，</p>\n<p>####下面是我常去的一些网站</p>\n"},{"title":"算法(一):Stack(栈)的实现","date":"2016-09-10T06:52:55.000Z","_content":"### 0.简介\n阅读过Java Stack源码的同学都只知道，Stack(栈)是继承自Vector(通常称为向量)而Vector是基于数组实现的，所以Stack也是是基于数组实现的。\n### 1.特点\nStack(栈)作为一种简单的数据结构,其特点就是先进后出即First In Last Out(FILO)。其与另外一中数据结构Queue(队列)相反。队列是先进先出的。举个例子：栈比作一根一头封闭的管道，数据比作一个个小球，小球进入管道后先进去的在最里。而后进管道的小球在最外。先把所有的小球都拿出来的时候，其出来的顺序与进入的顺序是相反的。（队列下一片文章介绍）\n ![](/img/stack/stack.jpg)\n### 2.基本方法\n```\npush() //压栈\npop()\t//出栈\npeek() //或的栈顶元素\nisEmpty() //栈是否为空\n\t\n```\n### 3.代码实现(java 实现)\n先上代码再分析\n\n```\nimport java.util.Arrays;\n\npublic class MyStack<T> {\n\t//数据\n\t Object[] data;\n\t//大小\n\tprivate int size;\n\t//默认容量\n\tprivate int capacity;\n\t//构造函数\n\tpublic MyStack() {\n\t\tthis.size = 0;\n\t\tthis.capacity = 10;\n\t\tthis.data = new Object[capacity];\n\t}\n\t//扩容方法\n\tprivate void ensureCapacity(){\n\t\tcapacity = capacity * 2;\n\t\tdata = Arrays.copyOf(data, capacity);\n\t}\n\t//push\n\tpublic void push(T element){\n\t\t//是否需要扩容\n\t\tif (size < capacity) {\n\t\t\tdata[size++] = element;\n\t\t}else{\n\t\t\tensureCapacity();\n\t\t\tdata[size++] = element;\n\t\t}\n\t}\n\t//pop\n\tpublic T pop(){\n\t\tif (size > 0) {\n\t\t\tObject obj = data[size-1];\n\t\t\tdata[--size] = null;\n\t\t\treturn (T) obj;\n\t\t}else{\n\t\t\tSystem.out.println(\"stack empty\");\n\t\t\treturn null;\n\t\t}\n\t}\n\t//isEmpty\n\tpublic boolean isEmpty(){\n\t\treturn size == 0;\n\t}\n\t//栈顶元素\n\tpublic T peek(){\n\t\tif (size > 0) {\n\t\t\treturn (T) data[size - 1];\n\t\t}\n\t\treturn null;\n\t}\n\t//测试方法\n\tpublic static void main(String[] args) {\n\t\tMyStack<String> myStack = new MyStack<String>();\n\t\t\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tString string = \"stack--\"+i;\n\t\t\tmyStack.push(string);\n\t\t\tSystem.out.println(\"push---\"+string);\n\t\t}\n\t\tfor (int i = 0; i < 6; i++) {\n\t\t\tSystem.out.println(\"pop---\"+myStack.pop());\n\n\t\t\tSystem.out.println(\"peek---\"+myStack.peek());\n\t\t\t\n\t\t}\n\t\tSystem.out.println(\"peek---\"+myStack.peek());\n\t\tSystem.out.println(myStack.isEmpty());\n\t\tfor (int i = 0; i < 6; i++) {\n\t\t\tSystem.out.println(\"pop---\"+myStack.pop());\n\t\t}\n\t\t\tSystem.out.println(myStack.isEmpty());\n\t\t\n\t}\n\n}\n\n```\n\n本代码只是简单实现一个栈的基本功能（不完善）感兴趣的同学可以参考Java Util包下的Stack和Vector具体实现方式。看了Java源码才发现自己代码与源码的差距简直是差太多了。不够可以发现Stack和Vector都是县城安全的（pop peek等方法都有synchronized关键字修饰）。栈的代码实现比较简单不做过多的分析了。之后可以一起阅读Stack和Vector的源码。\n\n","source":"_posts/算法-一-Stack-栈-的实现.md","raw":"---\ntitle: '算法(一):Stack(栈)的实现'\ndate: 2016-09-10 14:52:55\ntags:\n\t- 算法\n\t- Stack\n\t- 栈\n---\n### 0.简介\n阅读过Java Stack源码的同学都只知道，Stack(栈)是继承自Vector(通常称为向量)而Vector是基于数组实现的，所以Stack也是是基于数组实现的。\n### 1.特点\nStack(栈)作为一种简单的数据结构,其特点就是先进后出即First In Last Out(FILO)。其与另外一中数据结构Queue(队列)相反。队列是先进先出的。举个例子：栈比作一根一头封闭的管道，数据比作一个个小球，小球进入管道后先进去的在最里。而后进管道的小球在最外。先把所有的小球都拿出来的时候，其出来的顺序与进入的顺序是相反的。（队列下一片文章介绍）\n ![](/img/stack/stack.jpg)\n### 2.基本方法\n```\npush() //压栈\npop()\t//出栈\npeek() //或的栈顶元素\nisEmpty() //栈是否为空\n\t\n```\n### 3.代码实现(java 实现)\n先上代码再分析\n\n```\nimport java.util.Arrays;\n\npublic class MyStack<T> {\n\t//数据\n\t Object[] data;\n\t//大小\n\tprivate int size;\n\t//默认容量\n\tprivate int capacity;\n\t//构造函数\n\tpublic MyStack() {\n\t\tthis.size = 0;\n\t\tthis.capacity = 10;\n\t\tthis.data = new Object[capacity];\n\t}\n\t//扩容方法\n\tprivate void ensureCapacity(){\n\t\tcapacity = capacity * 2;\n\t\tdata = Arrays.copyOf(data, capacity);\n\t}\n\t//push\n\tpublic void push(T element){\n\t\t//是否需要扩容\n\t\tif (size < capacity) {\n\t\t\tdata[size++] = element;\n\t\t}else{\n\t\t\tensureCapacity();\n\t\t\tdata[size++] = element;\n\t\t}\n\t}\n\t//pop\n\tpublic T pop(){\n\t\tif (size > 0) {\n\t\t\tObject obj = data[size-1];\n\t\t\tdata[--size] = null;\n\t\t\treturn (T) obj;\n\t\t}else{\n\t\t\tSystem.out.println(\"stack empty\");\n\t\t\treturn null;\n\t\t}\n\t}\n\t//isEmpty\n\tpublic boolean isEmpty(){\n\t\treturn size == 0;\n\t}\n\t//栈顶元素\n\tpublic T peek(){\n\t\tif (size > 0) {\n\t\t\treturn (T) data[size - 1];\n\t\t}\n\t\treturn null;\n\t}\n\t//测试方法\n\tpublic static void main(String[] args) {\n\t\tMyStack<String> myStack = new MyStack<String>();\n\t\t\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tString string = \"stack--\"+i;\n\t\t\tmyStack.push(string);\n\t\t\tSystem.out.println(\"push---\"+string);\n\t\t}\n\t\tfor (int i = 0; i < 6; i++) {\n\t\t\tSystem.out.println(\"pop---\"+myStack.pop());\n\n\t\t\tSystem.out.println(\"peek---\"+myStack.peek());\n\t\t\t\n\t\t}\n\t\tSystem.out.println(\"peek---\"+myStack.peek());\n\t\tSystem.out.println(myStack.isEmpty());\n\t\tfor (int i = 0; i < 6; i++) {\n\t\t\tSystem.out.println(\"pop---\"+myStack.pop());\n\t\t}\n\t\t\tSystem.out.println(myStack.isEmpty());\n\t\t\n\t}\n\n}\n\n```\n\n本代码只是简单实现一个栈的基本功能（不完善）感兴趣的同学可以参考Java Util包下的Stack和Vector具体实现方式。看了Java源码才发现自己代码与源码的差距简直是差太多了。不够可以发现Stack和Vector都是县城安全的（pop peek等方法都有synchronized关键字修饰）。栈的代码实现比较简单不做过多的分析了。之后可以一起阅读Stack和Vector的源码。\n\n","slug":"算法-一-Stack-栈-的实现","published":1,"updated":"2016-09-10T07:33:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvyam000vdxs6bic5f06x","content":"<h3 id=\"0-简介\"><a href=\"#0-简介\" class=\"headerlink\" title=\"0.简介\"></a>0.简介</h3><p>阅读过Java Stack源码的同学都只知道，Stack(栈)是继承自Vector(通常称为向量)而Vector是基于数组实现的，所以Stack也是是基于数组实现的。</p>\n<h3 id=\"1-特点\"><a href=\"#1-特点\" class=\"headerlink\" title=\"1.特点\"></a>1.特点</h3><p>Stack(栈)作为一种简单的数据结构,其特点就是先进后出即First In Last Out(FILO)。其与另外一中数据结构Queue(队列)相反。队列是先进先出的。举个例子：栈比作一根一头封闭的管道，数据比作一个个小球，小球进入管道后先进去的在最里。而后进管道的小球在最外。先把所有的小球都拿出来的时候，其出来的顺序与进入的顺序是相反的。（队列下一片文章介绍）<br> <img src=\"/img/stack/stack.jpg\" alt=\"\"></p>\n<h3 id=\"2-基本方法\"><a href=\"#2-基本方法\" class=\"headerlink\" title=\"2.基本方法\"></a>2.基本方法</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">push</span><span class=\"params\">()</span></span> <span class=\"comment\">//压栈</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">pop</span><span class=\"params\">()</span></span>\t<span class=\"comment\">//出栈</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">peek</span><span class=\"params\">()</span></span> <span class=\"comment\">//或的栈顶元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">isEmpty</span><span class=\"params\">()</span></span> <span class=\"comment\">//栈是否为空</span></div></pre></td></tr></table></figure>\n<h3 id=\"3-代码实现-java-实现\"><a href=\"#3-代码实现-java-实现\" class=\"headerlink\" title=\"3.代码实现(java 实现)\"></a>3.代码实现(java 实现)</h3><p>先上代码再分析</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MyStack&lt;T&gt; &#123;</div><div class=\"line\">\t<span class=\"comment\">//数据</span></div><div class=\"line\">\t Object[] data;</div><div class=\"line\">\t<span class=\"comment\">//大小</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</div><div class=\"line\">\t<span class=\"comment\">//默认容量</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</div><div class=\"line\">\t<span class=\"comment\">//构造函数</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> MyStack() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"built_in\">size</span> = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.capacity = <span class=\"number\">10</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = <span class=\"keyword\">new</span> Object[capacity];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//扩容方法</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> ensureCapacity()&#123;</div><div class=\"line\">\t\tcapacity = capacity * <span class=\"number\">2</span>;</div><div class=\"line\">\t\tdata = Arrays.copyOf(data, capacity);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//push</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> push(T element)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//是否需要扩容</span></div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &lt; capacity) &#123;</div><div class=\"line\">\t\t\tdata[<span class=\"built_in\">size</span>++] = element;</div><div class=\"line\">\t\t&#125;<span class=\"built_in\">else</span>&#123;</div><div class=\"line\">\t\t\tensureCapacity();</div><div class=\"line\">\t\t\tdata[<span class=\"built_in\">size</span>++] = element;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//pop</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> T pop()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tObject obj = data[<span class=\"built_in\">size</span><span class=\"number\">-1</span>];</div><div class=\"line\">\t\t\tdata[--<span class=\"built_in\">size</span>] = null;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> (T) obj;</div><div class=\"line\">\t\t&#125;<span class=\"built_in\">else</span>&#123;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"stack empty\"</span>);</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> null;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//isEmpty</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> isEmpty()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> <span class=\"built_in\">size</span> == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//栈顶元素</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> T <span class=\"built_in\">peek</span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> (T) data[<span class=\"built_in\">size</span> - <span class=\"number\">1</span>];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> null;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//测试方法</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">\t\tMyStack&lt;<span class=\"keyword\">String</span>&gt; myStack = <span class=\"keyword\">new</span> MyStack&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">String</span> <span class=\"keyword\">string</span> = <span class=\"string\">\"stack--\"</span>+i;</div><div class=\"line\">\t\t\tmyStack.push(<span class=\"keyword\">string</span>);</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"push---\"</span>+<span class=\"keyword\">string</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"pop---\"</span>+myStack.pop());</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"peek---\"</span>+myStack.<span class=\"built_in\">peek</span>());</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"peek---\"</span>+myStack.<span class=\"built_in\">peek</span>());</div><div class=\"line\">\t\tSystem.out.<span class=\"built_in\">println</span>(myStack.isEmpty());</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"pop---\"</span>+myStack.pop());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(myStack.isEmpty());</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>本代码只是简单实现一个栈的基本功能（不完善）感兴趣的同学可以参考Java Util包下的Stack和Vector具体实现方式。看了Java源码才发现自己代码与源码的差距简直是差太多了。不够可以发现Stack和Vector都是县城安全的（pop peek等方法都有synchronized关键字修饰）。栈的代码实现比较简单不做过多的分析了。之后可以一起阅读Stack和Vector的源码。</p>\n","excerpt":"","more":"<h3 id=\"0-简介\"><a href=\"#0-简介\" class=\"headerlink\" title=\"0.简介\"></a>0.简介</h3><p>阅读过Java Stack源码的同学都只知道，Stack(栈)是继承自Vector(通常称为向量)而Vector是基于数组实现的，所以Stack也是是基于数组实现的。</p>\n<h3 id=\"1-特点\"><a href=\"#1-特点\" class=\"headerlink\" title=\"1.特点\"></a>1.特点</h3><p>Stack(栈)作为一种简单的数据结构,其特点就是先进后出即First In Last Out(FILO)。其与另外一中数据结构Queue(队列)相反。队列是先进先出的。举个例子：栈比作一根一头封闭的管道，数据比作一个个小球，小球进入管道后先进去的在最里。而后进管道的小球在最外。先把所有的小球都拿出来的时候，其出来的顺序与进入的顺序是相反的。（队列下一片文章介绍）<br> <img src=\"/img/stack/stack.jpg\" alt=\"\"></p>\n<h3 id=\"2-基本方法\"><a href=\"#2-基本方法\" class=\"headerlink\" title=\"2.基本方法\"></a>2.基本方法</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">push</span><span class=\"params\">()</span></span> <span class=\"comment\">//压栈</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">pop</span><span class=\"params\">()</span></span>\t<span class=\"comment\">//出栈</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">peek</span><span class=\"params\">()</span></span> <span class=\"comment\">//或的栈顶元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"title\">isEmpty</span><span class=\"params\">()</span></span> <span class=\"comment\">//栈是否为空</span></div></pre></td></tr></table></figure>\n<h3 id=\"3-代码实现-java-实现\"><a href=\"#3-代码实现-java-实现\" class=\"headerlink\" title=\"3.代码实现(java 实现)\"></a>3.代码实现(java 实现)</h3><p>先上代码再分析</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> MyStack&lt;T&gt; &#123;</div><div class=\"line\">\t<span class=\"comment\">//数据</span></div><div class=\"line\">\t Object[] data;</div><div class=\"line\">\t<span class=\"comment\">//大小</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</div><div class=\"line\">\t<span class=\"comment\">//默认容量</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> capacity;</div><div class=\"line\">\t<span class=\"comment\">//构造函数</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> MyStack() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.<span class=\"built_in\">size</span> = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.capacity = <span class=\"number\">10</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.data = <span class=\"keyword\">new</span> Object[capacity];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//扩容方法</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">void</span> ensureCapacity()&#123;</div><div class=\"line\">\t\tcapacity = capacity * <span class=\"number\">2</span>;</div><div class=\"line\">\t\tdata = Arrays.copyOf(data, capacity);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//push</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> push(T element)&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//是否需要扩容</span></div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &lt; capacity) &#123;</div><div class=\"line\">\t\t\tdata[<span class=\"built_in\">size</span>++] = element;</div><div class=\"line\">\t\t&#125;<span class=\"built_in\">else</span>&#123;</div><div class=\"line\">\t\t\tensureCapacity();</div><div class=\"line\">\t\t\tdata[<span class=\"built_in\">size</span>++] = element;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//pop</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> T pop()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tObject obj = data[<span class=\"built_in\">size</span><span class=\"number\">-1</span>];</div><div class=\"line\">\t\t\tdata[--<span class=\"built_in\">size</span>] = null;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> (T) obj;</div><div class=\"line\">\t\t&#125;<span class=\"built_in\">else</span>&#123;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"stack empty\"</span>);</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> null;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//isEmpty</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> isEmpty()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> <span class=\"built_in\">size</span> == <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//栈顶元素</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> T <span class=\"built_in\">peek</span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">return</span> (T) data[<span class=\"built_in\">size</span> - <span class=\"number\">1</span>];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> null;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//测试方法</span></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</div><div class=\"line\">\t\tMyStack&lt;<span class=\"keyword\">String</span>&gt; myStack = <span class=\"keyword\">new</span> MyStack&lt;<span class=\"keyword\">String</span>&gt;();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">String</span> <span class=\"keyword\">string</span> = <span class=\"string\">\"stack--\"</span>+i;</div><div class=\"line\">\t\t\tmyStack.push(<span class=\"keyword\">string</span>);</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"push---\"</span>+<span class=\"keyword\">string</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"pop---\"</span>+myStack.pop());</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"peek---\"</span>+myStack.<span class=\"built_in\">peek</span>());</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"peek---\"</span>+myStack.<span class=\"built_in\">peek</span>());</div><div class=\"line\">\t\tSystem.out.<span class=\"built_in\">println</span>(myStack.isEmpty());</div><div class=\"line\">\t\t<span class=\"built_in\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"pop---\"</span>+myStack.pop());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t\tSystem.out.<span class=\"built_in\">println</span>(myStack.isEmpty());</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>本代码只是简单实现一个栈的基本功能（不完善）感兴趣的同学可以参考Java Util包下的Stack和Vector具体实现方式。看了Java源码才发现自己代码与源码的差距简直是差太多了。不够可以发现Stack和Vector都是县城安全的（pop peek等方法都有synchronized关键字修饰）。栈的代码实现比较简单不做过多的分析了。之后可以一起阅读Stack和Vector的源码。</p>\n"},{"title":"算法(二):实现一个getMin功能的栈","date":"2016-09-10T07:59:55.000Z","_content":"\n> 题目:\n> 在Stack的基础上实现一个可以获得Stack的最小元素的方法（getMin）,要求pop,push,getMin操作的时间复杂度是o(1)\n> \n\n题目来源《程序员代码面试指南》作者：左程云\n\n### 0.分析\n题目要求时间复杂度为o(1),即可以直接获得Stack的最小元素，我们可以使用两个栈，一个栈（StackData）存储全部元素，一个栈(StackMin)来存储最小元素（其实不是一个最小元素，应该是比第一个压入StackData栈的小的所有元素），getMin即获得StackMin栈的栈顶元素，需要注意的就是在push和pop时都需要和StackMin栈的栈顶做比较,如果出栈的数据与StackMin栈顶元素相同那么StackMin也需要pop数据。\n如图\n![](/img/stack/getMinStack.png)\n\n### 1.代码\n\n```\n\nimport java.util.Stack;\n\npublic class MinSatck {\n\t\n\tprivate Stack<Integer> stackData;\n\tprivate Stack<Integer> stackMin;\n\t\n\tpublic MinSatck() {\n\n\t\tthis.stackData = new Stack<>();\n\t\tthis.stackMin = new Stack<>();\n\t}\n\tpublic void push(int item){\n\t\t\n\t\tif (stackMin.isEmpty()) {\n\t\t\tstackMin.push(item);\n\t\t}else if (item <= getMin()) {\n\t\t\tstackMin.push(item);\n\t\t}\t\n\t\t\n\t\tstackData.push(item);\n\t}\n\t\n\tpublic int pop(){\n\t\tif (stackData.isEmpty()) {\n\t\t\tthrow new RuntimeException(\"stack is empty\");\n\t\t}else{\n\t\t\tint value = stackData.pop();\n\t\t\tif (value == getMin()) {\n\t\t\t\tstackMin.pop();\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t}\n\t\n\tpublic int getMin(){\n\t\tif (stackMin.isEmpty()) {\n\t\t\tthrow new RuntimeException(\"stack is empty\");\n\t\t}\n\t\treturn stackMin.peek();\n\t}\n\t\n}\n```\n\n\n\n","source":"_posts/算法-二-实现一个getMin功能的栈.md","raw":"---\ntitle: '算法(二):实现一个getMin功能的栈'\ndate: 2016-09-10 15:59:55\ntags:\n\t- 算法\n\t- Stack\n\t- 栈\n---\n\n> 题目:\n> 在Stack的基础上实现一个可以获得Stack的最小元素的方法（getMin）,要求pop,push,getMin操作的时间复杂度是o(1)\n> \n\n题目来源《程序员代码面试指南》作者：左程云\n\n### 0.分析\n题目要求时间复杂度为o(1),即可以直接获得Stack的最小元素，我们可以使用两个栈，一个栈（StackData）存储全部元素，一个栈(StackMin)来存储最小元素（其实不是一个最小元素，应该是比第一个压入StackData栈的小的所有元素），getMin即获得StackMin栈的栈顶元素，需要注意的就是在push和pop时都需要和StackMin栈的栈顶做比较,如果出栈的数据与StackMin栈顶元素相同那么StackMin也需要pop数据。\n如图\n![](/img/stack/getMinStack.png)\n\n### 1.代码\n\n```\n\nimport java.util.Stack;\n\npublic class MinSatck {\n\t\n\tprivate Stack<Integer> stackData;\n\tprivate Stack<Integer> stackMin;\n\t\n\tpublic MinSatck() {\n\n\t\tthis.stackData = new Stack<>();\n\t\tthis.stackMin = new Stack<>();\n\t}\n\tpublic void push(int item){\n\t\t\n\t\tif (stackMin.isEmpty()) {\n\t\t\tstackMin.push(item);\n\t\t}else if (item <= getMin()) {\n\t\t\tstackMin.push(item);\n\t\t}\t\n\t\t\n\t\tstackData.push(item);\n\t}\n\t\n\tpublic int pop(){\n\t\tif (stackData.isEmpty()) {\n\t\t\tthrow new RuntimeException(\"stack is empty\");\n\t\t}else{\n\t\t\tint value = stackData.pop();\n\t\t\tif (value == getMin()) {\n\t\t\t\tstackMin.pop();\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\t}\n\t\n\tpublic int getMin(){\n\t\tif (stackMin.isEmpty()) {\n\t\t\tthrow new RuntimeException(\"stack is empty\");\n\t\t}\n\t\treturn stackMin.peek();\n\t}\n\t\n}\n```\n\n\n\n","slug":"算法-二-实现一个getMin功能的栈","published":1,"updated":"2016-09-10T09:20:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvyan000xdxs6w4tgkgdx","content":"<blockquote>\n<p>题目:<br>在Stack的基础上实现一个可以获得Stack的最小元素的方法（getMin）,要求pop,push,getMin操作的时间复杂度是o(1)</p>\n</blockquote>\n<p>题目来源《程序员代码面试指南》作者：左程云</p>\n<h3 id=\"0-分析\"><a href=\"#0-分析\" class=\"headerlink\" title=\"0.分析\"></a>0.分析</h3><p>题目要求时间复杂度为o(1),即可以直接获得Stack的最小元素，我们可以使用两个栈，一个栈（StackData）存储全部元素，一个栈(StackMin)来存储最小元素（其实不是一个最小元素，应该是比第一个压入StackData栈的小的所有元素），getMin即获得StackMin栈的栈顶元素，需要注意的就是在push和pop时都需要和StackMin栈的栈顶做比较,如果出栈的数据与StackMin栈顶元素相同那么StackMin也需要pop数据。<br>如图<br><img src=\"/img/stack/getMinStack.png\" alt=\"\"></p>\n<h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1.代码\"></a>1.代码</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import java.util.Stack;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MinSatck</span> &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; stackData;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; stackMin;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MinSatck</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.stackData = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.stackMin = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span>(<span class=\"params\"><span class=\"keyword\">int</span> item</span>)</span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stackMin.isEmpty()) &#123;</div><div class=\"line\">\t\t\tstackMin.push(item);</div><div class=\"line\">\t\t&#125;<span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> (<span class=\"params\">item &lt;= getMin(</span>)) </span>&#123;</div><div class=\"line\">\t\t\tstackMin.push(item);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tstackData.push(item);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stackData.isEmpty()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"stack is empty\"</span>);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> <span class=\"keyword\">value</span> = stackData.pop();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> == getMin()) &#123;</div><div class=\"line\">\t\t\t\tstackMin.pop();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMin</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stackMin.isEmpty()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"stack is empty\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> stackMin.peek();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>题目:<br>在Stack的基础上实现一个可以获得Stack的最小元素的方法（getMin）,要求pop,push,getMin操作的时间复杂度是o(1)</p>\n</blockquote>\n<p>题目来源《程序员代码面试指南》作者：左程云</p>\n<h3 id=\"0-分析\"><a href=\"#0-分析\" class=\"headerlink\" title=\"0.分析\"></a>0.分析</h3><p>题目要求时间复杂度为o(1),即可以直接获得Stack的最小元素，我们可以使用两个栈，一个栈（StackData）存储全部元素，一个栈(StackMin)来存储最小元素（其实不是一个最小元素，应该是比第一个压入StackData栈的小的所有元素），getMin即获得StackMin栈的栈顶元素，需要注意的就是在push和pop时都需要和StackMin栈的栈顶做比较,如果出栈的数据与StackMin栈顶元素相同那么StackMin也需要pop数据。<br>如图<br><img src=\"/img/stack/getMinStack.png\" alt=\"\"></p>\n<h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1.代码\"></a>1.代码</h3><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">import java.util.Stack;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MinSatck</span> &#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; stackData;</div><div class=\"line\">\t<span class=\"keyword\">private</span> Stack&lt;Integer&gt; stackMin;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MinSatck</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.stackData = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.stackMin = <span class=\"keyword\">new</span> Stack&lt;&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span>(<span class=\"params\"><span class=\"keyword\">int</span> item</span>)</span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stackMin.isEmpty()) &#123;</div><div class=\"line\">\t\t\tstackMin.push(item);</div><div class=\"line\">\t\t&#125;<span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span> (<span class=\"params\">item &lt;= getMin(</span>)) </span>&#123;</div><div class=\"line\">\t\t\tstackMin.push(item);</div><div class=\"line\">\t\t&#125;\t</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tstackData.push(item);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stackData.isEmpty()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"stack is empty\"</span>);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> <span class=\"keyword\">value</span> = stackData.pop();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">value</span> == getMin()) &#123;</div><div class=\"line\">\t\t\t\tstackMin.pop();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getMin</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (stackMin.isEmpty()) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"stack is empty\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> stackMin.peek();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"读书","date":"2015-09-05T12:03:57.000Z","_content":"","source":"_posts/读书 2.md","raw":"title: 读书\ndate: 2015-09-05 20:03:57\ntags:\n---\n","slug":"读书 2","published":1,"updated":"2015-09-05T12:03:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvyao000zdxs6mi8ybpu2","content":"","excerpt":"","more":""},{"title":"读书","date":"2016-09-01T06:32:21.000Z","_content":"\n从小有个习惯，就是爱买书，但是买的书基本不看，工作以后买的就更多了。\n这就是我从学编程到现在买的书（不是全部）,基本都是技术书籍，大部分只是概括的看了看。也有仔细研究过的书籍，完后有时间再一一列举\n\n ![](/img/bookImg/allbooks.jpeg)\n\n","source":"_posts/读书.md","raw":"---\ntitle: 读书\ndate: 2016-09-01 14:32:21\ntags:\n    - 读书\n    - 编程书籍\n---\n\n从小有个习惯，就是爱买书，但是买的书基本不看，工作以后买的就更多了。\n这就是我从学编程到现在买的书（不是全部）,基本都是技术书籍，大部分只是概括的看了看。也有仔细研究过的书籍，完后有时间再一一列举\n\n ![](/img/bookImg/allbooks.jpeg)\n\n","slug":"读书","published":1,"updated":"2016-09-09T11:51:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2mvyaq0012dxs6tgp3l2vm","content":"<p>从小有个习惯，就是爱买书，但是买的书基本不看，工作以后买的就更多了。<br>这就是我从学编程到现在买的书（不是全部）,基本都是技术书籍，大部分只是概括的看了看。也有仔细研究过的书籍，完后有时间再一一列举</p>\n<p> <img src=\"/img/bookImg/allbooks.jpeg\" alt=\"\"></p>\n","excerpt":"","more":"<p>从小有个习惯，就是爱买书，但是买的书基本不看，工作以后买的就更多了。<br>这就是我从学编程到现在买的书（不是全部）,基本都是技术书籍，大部分只是概括的看了看。也有仔细研究过的书籍，完后有时间再一一列举</p>\n<p> <img src=\"/img/bookImg/allbooks.jpeg\" alt=\"\"></p>\n"},{"title":"Java中interface与@interface的区别","date":"2016-10-09T12:54:45.000Z","_content":"\n### interface与@interface的区别","source":"_posts/Java中interface与-interface的区别.md","raw":"---\ntitle: Java中interface与@interface的区别\ndate: 2016-10-09 20:54:45\ntags:\n\t- Java\n\t- 注解\n\t- interface\n---\n\n### interface与@interface的区别","slug":"Java中interface与-interface的区别","published":1,"updated":"2016-10-09T12:58:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu2my9460000h3s6l8nbqkv5","content":"<h3 id=\"interface与-interface的区别\"><a href=\"#interface与-interface的区别\" class=\"headerlink\" title=\"interface与@interface的区别\"></a>interface与@interface的区别</h3>","excerpt":"","more":"<h3 id=\"interface与-interface的区别\"><a href=\"#interface与-interface的区别\" class=\"headerlink\" title=\"interface与@interface的区别\"></a>interface与@interface的区别</h3>"}],"PostAsset":[{"_id":"source/_posts/Java内部类详解/innerclass01.png","slug":"innerclass01.png","post":"ciu2mvy9u0006dxs67nm6jnh1","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ciu2mvy9g0001dxs6qyb03hzz","tag_id":"ciu2mvy9s0005dxs6gqhbxbmr","_id":"ciu2mvya2000bdxs6ez76i50j"},{"post_id":"ciu2mvy9m0003dxs6nyvgaiyq","tag_id":"ciu2mvya1000adxs6s2jgp429","_id":"ciu2mvyac000jdxs6p9qzhkww"},{"post_id":"ciu2mvy9m0003dxs6nyvgaiyq","tag_id":"ciu2mvya5000edxs6e3r81ipn","_id":"ciu2mvyaf000ldxs6gq3tpf2n"},{"post_id":"ciu2mvy9u0006dxs67nm6jnh1","tag_id":"ciu2mvy9s0005dxs6gqhbxbmr","_id":"ciu2mvyak000rdxs64te7gnxz"},{"post_id":"ciu2mvy9u0006dxs67nm6jnh1","tag_id":"ciu2mvyaf000mdxs6khd161yq","_id":"ciu2mvyal000tdxs6wdqrtfy2"},{"post_id":"ciu2mvya2000cdxs6pvke0yav","tag_id":"ciu2mvy9s0005dxs6gqhbxbmr","_id":"ciu2mvyam000wdxs65lsxebtc"},{"post_id":"ciu2mvya2000cdxs6pvke0yav","tag_id":"ciu2mvya5000edxs6e3r81ipn","_id":"ciu2mvyao000ydxs6qligzv7u"},{"post_id":"ciu2mvya6000fdxs62tt3b3ym","tag_id":"ciu2mvyam000udxs66ruyohae","_id":"ciu2mvyaq0011dxs6nw8qox4j"},{"post_id":"ciu2mvya7000gdxs68pohz2rz","tag_id":"ciu2mvyam000udxs66ruyohae","_id":"ciu2mvyas0014dxs61k37fp5z"},{"post_id":"ciu2mvyaj000qdxs6o84kw7db","tag_id":"ciu2mvyas0013dxs6iwrfr42i","_id":"ciu2mvyat0017dxs6h0tnqi8a"},{"post_id":"ciu2mvyaj000qdxs6o84kw7db","tag_id":"ciu2mvy9s0005dxs6gqhbxbmr","_id":"ciu2mvyat0018dxs6atw343k4"},{"post_id":"ciu2mvyaj000qdxs6o84kw7db","tag_id":"ciu2mvyat0015dxs6ju93rayl","_id":"ciu2mvyau001adxs6dkfp8x2t"},{"post_id":"ciu2mvyal000sdxs689xt0vrv","tag_id":"ciu2mvyam000udxs66ruyohae","_id":"ciu2mvyau001bdxs6vwxs13sy"},{"post_id":"ciu2mvyam000vdxs6bic5f06x","tag_id":"ciu2mvyas0013dxs6iwrfr42i","_id":"ciu2mvyav001fdxs68y09v1f3"},{"post_id":"ciu2mvyam000vdxs6bic5f06x","tag_id":"ciu2mvyau001cdxs6rzanbco1","_id":"ciu2mvyav001gdxs6huw1zcw4"},{"post_id":"ciu2mvyam000vdxs6bic5f06x","tag_id":"ciu2mvyau001ddxs6hgx1llej","_id":"ciu2mvyav001idxs6dgk0xhwn"},{"post_id":"ciu2mvyan000xdxs6w4tgkgdx","tag_id":"ciu2mvyas0013dxs6iwrfr42i","_id":"ciu2mvyax001ldxs6c7zd8lu0"},{"post_id":"ciu2mvyan000xdxs6w4tgkgdx","tag_id":"ciu2mvyau001cdxs6rzanbco1","_id":"ciu2mvyax001mdxs6c2htmzqi"},{"post_id":"ciu2mvyan000xdxs6w4tgkgdx","tag_id":"ciu2mvyau001ddxs6hgx1llej","_id":"ciu2mvyb1001odxs6lw1zmcbk"},{"post_id":"ciu2mvyaq0012dxs6tgp3l2vm","tag_id":"ciu2mvyaw001kdxs6ulqxo2dq","_id":"ciu2mvyb5001pdxs6ombrlcuv"},{"post_id":"ciu2mvyaq0012dxs6tgp3l2vm","tag_id":"ciu2mvyax001ndxs6cglnwmkh","_id":"ciu2mvyb5001qdxs6f6ojgvtp"},{"post_id":"ciu2my9460000h3s6l8nbqkv5","tag_id":"ciu2mvy9s0005dxs6gqhbxbmr","_id":"ciu2my94i0003h3s657t8wa2z"},{"post_id":"ciu2my9460000h3s6l8nbqkv5","tag_id":"ciu2my9490001h3s6x8trhvih","_id":"ciu2my94i0004h3s6yd2weftz"},{"post_id":"ciu2my9460000h3s6l8nbqkv5","tag_id":"ciu2my94h0002h3s6swd1fqug","_id":"ciu2my94i0005h3s6ylc29h5t"},{"post_id":"ciu2mvyab000idxs63e706zpu","tag_id":"ciu2mvy9s0005dxs6gqhbxbmr","_id":"ciu2n0qu10001hds614h4yc83"},{"post_id":"ciu2mvyab000idxs63e706zpu","tag_id":"ciu2n3d2q0000ivs6d6fkkrue","_id":"ciu2n3d300001ivs6vweuoycn"}],"Tag":[{"name":"Java","_id":"ciu2mvy9s0005dxs6gqhbxbmr"},{"name":"HashSet","_id":"ciu2mvya1000adxs6s2jgp429"},{"name":"ArrayList","_id":"ciu2mvya5000edxs6e3r81ipn"},{"name":"Java内部类","_id":"ciu2mvyaf000mdxs6khd161yq"},{"name":"iOS","_id":"ciu2mvyam000udxs66ruyohae"},{"name":"算法","_id":"ciu2mvyas0013dxs6iwrfr42i"},{"name":"数据结构","_id":"ciu2mvyat0015dxs6ju93rayl"},{"name":"Stack","_id":"ciu2mvyau001cdxs6rzanbco1"},{"name":"栈","_id":"ciu2mvyau001ddxs6hgx1llej"},{"name":"读书","_id":"ciu2mvyaw001kdxs6ulqxo2dq"},{"name":"编程书籍","_id":"ciu2mvyax001ndxs6cglnwmkh"},{"name":"注解","_id":"ciu2my9490001h3s6x8trhvih"},{"name":"interface","_id":"ciu2my94h0002h3s6swd1fqug"},{"name":"《深入理解Java虚拟机》","_id":"ciu2n0qu00000hds65eiz8prt"},{"name":"深入理解Java虚拟机","_id":"ciu2n3d2q0000ivs6d6fkkrue"}]}}